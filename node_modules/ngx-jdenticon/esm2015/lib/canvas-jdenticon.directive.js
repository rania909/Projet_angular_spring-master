/**
 * @fileoverview added by tsickle
 * Generated from: lib/canvas-jdenticon.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, HostBinding, ElementRef, Inject, Optional, NgZone } from '@angular/core';
import { updateCanvas } from 'jdenticon';
import { JDENTICON_CONFIG } from './config';
// Use same attributes as for VanillaJS Jdenticon.
// tslint:disable:directive-selector no-input-rename
export class CanvasJdenticonDirective {
    /**
     * @param {?} el
     * @param {?} zone
     * @param {?} config
     */
    constructor(el, zone, config) {
        this.el = el;
        this.zone = zone;
        this.config = config;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        // setTimeout is used to ensure that Angular has updated the host attributes.
        // runOutsideAngular is used to prevent an additional Angular change detection.
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                updateCanvas(this.el.nativeElement, undefined, this.config);
            }));
        }));
    }
}
CanvasJdenticonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'canvas[data-jdenticon-hash],canvas[data-jdenticon-value]',
            },] }
];
/** @nocollapse */
CanvasJdenticonDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [JDENTICON_CONFIG,] }] }
];
CanvasJdenticonDirective.propDecorators = {
    hash: [{ type: Input, args: ['data-jdenticon-hash',] }, { type: HostBinding, args: ['attr.data-jdenticon-hash',] }],
    value: [{ type: Input, args: ['data-jdenticon-value',] }, { type: HostBinding, args: ['attr.data-jdenticon-value',] }],
    width: [{ type: Input }, { type: HostBinding, args: ['attr.width',] }],
    height: [{ type: Input }, { type: HostBinding, args: ['attr.height',] }]
};
if (false) {
    /** @type {?} */
    CanvasJdenticonDirective.prototype.hash;
    /** @type {?} */
    CanvasJdenticonDirective.prototype.value;
    /** @type {?} */
    CanvasJdenticonDirective.prototype.width;
    /** @type {?} */
    CanvasJdenticonDirective.prototype.height;
    /**
     * @type {?}
     * @private
     */
    CanvasJdenticonDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    CanvasJdenticonDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    CanvasJdenticonDirective.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLWpkZW50aWNvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtamRlbnRpY29uLyIsInNvdXJjZXMiOlsibGliL2NhbnZhcy1qZGVudGljb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWEsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRyxPQUFPLEVBQUUsWUFBWSxFQUFtQixNQUFNLFdBQVcsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxVQUFVLENBQUM7OztBQVE1QyxNQUFNLE9BQU8sd0JBQXdCOzs7Ozs7SUFrQm5DLFlBQ1UsRUFBaUMsRUFDakMsSUFBWSxFQUMwQixNQUF1QjtRQUY3RCxPQUFFLEdBQUYsRUFBRSxDQUErQjtRQUNqQyxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQzBCLFdBQU0sR0FBTixNQUFNLENBQWlCO0lBQ25FLENBQUM7Ozs7SUFFTCxXQUFXO1FBQ1QsNkVBQTZFO1FBQzdFLCtFQUErRTtRQUMvRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQjs7O1FBQUMsR0FBRyxFQUFFO1lBQy9CLFVBQVU7OztZQUFDLEdBQUcsRUFBRTtnQkFDZCxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM5RCxDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBbkNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsMERBQTBEO2FBQ3JFOzs7O1lBVGtELFVBQVU7WUFBb0IsTUFBTTs0Q0ErQmxGLFFBQVEsWUFBSSxNQUFNLFNBQUMsZ0JBQWdCOzs7bUJBbkJyQyxLQUFLLFNBQUMscUJBQXFCLGNBQzNCLFdBQVcsU0FBQywwQkFBMEI7b0JBR3RDLEtBQUssU0FBQyxzQkFBc0IsY0FDNUIsV0FBVyxTQUFDLDJCQUEyQjtvQkFHdkMsS0FBSyxZQUNMLFdBQVcsU0FBQyxZQUFZO3FCQUd4QixLQUFLLFlBQ0wsV0FBVyxTQUFDLGFBQWE7Ozs7SUFiMUIsd0NBRWE7O0lBRWIseUNBRVc7O0lBRVgseUNBRXVCOztJQUV2QiwwQ0FFd0I7Ozs7O0lBR3RCLHNDQUF5Qzs7Ozs7SUFDekMsd0NBQW9COzs7OztJQUNwQiwwQ0FBcUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkNoYW5nZXMsIEhvc3RCaW5kaW5nLCBFbGVtZW50UmVmLCBJbmplY3QsIE9wdGlvbmFsLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgdXBkYXRlQ2FudmFzLCBKZGVudGljb25Db25maWcgfSBmcm9tICdqZGVudGljb24nO1xyXG5pbXBvcnQgeyBKREVOVElDT05fQ09ORklHIH0gZnJvbSAnLi9jb25maWcnO1xyXG5cclxuLy8gVXNlIHNhbWUgYXR0cmlidXRlcyBhcyBmb3IgVmFuaWxsYUpTIEpkZW50aWNvbi5cclxuLy8gdHNsaW50OmRpc2FibGU6ZGlyZWN0aXZlLXNlbGVjdG9yIG5vLWlucHV0LXJlbmFtZVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdjYW52YXNbZGF0YS1qZGVudGljb24taGFzaF0sY2FudmFzW2RhdGEtamRlbnRpY29uLXZhbHVlXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDYW52YXNKZGVudGljb25EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG5cclxuICBASW5wdXQoJ2RhdGEtamRlbnRpY29uLWhhc2gnKVxyXG4gIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLWpkZW50aWNvbi1oYXNoJylcclxuICBoYXNoOiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgnZGF0YS1qZGVudGljb24tdmFsdWUnKVxyXG4gIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLWpkZW50aWNvbi12YWx1ZScpXHJcbiAgdmFsdWU6IGFueTtcclxuXHJcbiAgQElucHV0KClcclxuICBASG9zdEJpbmRpbmcoJ2F0dHIud2lkdGgnKVxyXG4gIHdpZHRoOiBzdHJpbmcgfCBudW1iZXI7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmhlaWdodCcpXHJcbiAgaGVpZ2h0OiBzdHJpbmcgfCBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZjxIVE1MQ2FudmFzRWxlbWVudD4sXHJcbiAgICBwcml2YXRlIHpvbmU6IE5nWm9uZSxcclxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoSkRFTlRJQ09OX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IEpkZW50aWNvbkNvbmZpZyxcclxuICApIHsgfVxyXG5cclxuICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgIC8vIHNldFRpbWVvdXQgaXMgdXNlZCB0byBlbnN1cmUgdGhhdCBBbmd1bGFyIGhhcyB1cGRhdGVkIHRoZSBob3N0IGF0dHJpYnV0ZXMuXHJcbiAgICAvLyBydW5PdXRzaWRlQW5ndWxhciBpcyB1c2VkIHRvIHByZXZlbnQgYW4gYWRkaXRpb25hbCBBbmd1bGFyIGNoYW5nZSBkZXRlY3Rpb24uXHJcbiAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB1cGRhdGVDYW52YXModGhpcy5lbC5uYXRpdmVFbGVtZW50LCB1bmRlZmluZWQsIHRoaXMuY29uZmlnKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==
/**
 * @fileoverview added by tsickle
 * Generated from: lib/svg-jdenticon.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, HostBinding, ElementRef, Inject, Optional, NgZone } from '@angular/core';
import { updateSvg } from 'jdenticon';
import { JDENTICON_CONFIG } from './config';
// Use same attributes as for VanillaJS Jdenticon.
// tslint:disable:directive-selector no-input-rename
export class SvgJdenticonDirective {
    /**
     * @param {?} el
     * @param {?} zone
     * @param {?} config
     */
    constructor(el, zone, config) {
        this.el = el;
        this.zone = zone;
        this.config = config;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        // setTimeout is used to ensure that Angular has updated the host attributes.
        // runOutsideAngular is used to prevent an additional Angular change detection.
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                updateSvg(this.el.nativeElement, undefined, this.config);
            }));
        }));
    }
}
SvgJdenticonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'svg[data-jdenticon-hash],svg[data-jdenticon-value]',
            },] }
];
/** @nocollapse */
SvgJdenticonDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [JDENTICON_CONFIG,] }] }
];
SvgJdenticonDirective.propDecorators = {
    hash: [{ type: Input, args: ['data-jdenticon-hash',] }, { type: HostBinding, args: ['attr.data-jdenticon-hash',] }],
    value: [{ type: Input, args: ['data-jdenticon-value',] }, { type: HostBinding, args: ['attr.data-jdenticon-value',] }],
    width: [{ type: Input }, { type: HostBinding, args: ['attr.width',] }],
    height: [{ type: Input }, { type: HostBinding, args: ['attr.height',] }]
};
if (false) {
    /** @type {?} */
    SvgJdenticonDirective.prototype.hash;
    /** @type {?} */
    SvgJdenticonDirective.prototype.value;
    /** @type {?} */
    SvgJdenticonDirective.prototype.width;
    /** @type {?} */
    SvgJdenticonDirective.prototype.height;
    /**
     * @type {?}
     * @private
     */
    SvgJdenticonDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    SvgJdenticonDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    SvgJdenticonDirective.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWpkZW50aWNvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtamRlbnRpY29uLyIsInNvdXJjZXMiOlsibGliL3N2Zy1qZGVudGljb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWEsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRyxPQUFPLEVBQUUsU0FBUyxFQUFtQixNQUFNLFdBQVcsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxVQUFVLENBQUM7OztBQVE1QyxNQUFNLE9BQU8scUJBQXFCOzs7Ozs7SUFrQmhDLFlBQ1UsRUFBNkIsRUFDN0IsSUFBWSxFQUMwQixNQUF1QjtRQUY3RCxPQUFFLEdBQUYsRUFBRSxDQUEyQjtRQUM3QixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQzBCLFdBQU0sR0FBTixNQUFNLENBQWlCO0lBQ25FLENBQUM7Ozs7SUFFTCxXQUFXO1FBQ1QsNkVBQTZFO1FBQzdFLCtFQUErRTtRQUMvRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQjs7O1FBQUMsR0FBRyxFQUFFO1lBQy9CLFVBQVU7OztZQUFDLEdBQUcsRUFBRTtnQkFDZCxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMzRCxDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBbkNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0RBQW9EO2FBQy9EOzs7O1lBVGtELFVBQVU7WUFBb0IsTUFBTTs0Q0ErQmxGLFFBQVEsWUFBSSxNQUFNLFNBQUMsZ0JBQWdCOzs7bUJBbkJyQyxLQUFLLFNBQUMscUJBQXFCLGNBQzNCLFdBQVcsU0FBQywwQkFBMEI7b0JBR3RDLEtBQUssU0FBQyxzQkFBc0IsY0FDNUIsV0FBVyxTQUFDLDJCQUEyQjtvQkFHdkMsS0FBSyxZQUNMLFdBQVcsU0FBQyxZQUFZO3FCQUd4QixLQUFLLFlBQ0wsV0FBVyxTQUFDLGFBQWE7Ozs7SUFiMUIscUNBRWE7O0lBRWIsc0NBRVc7O0lBRVgsc0NBRXVCOztJQUV2Qix1Q0FFd0I7Ozs7O0lBR3RCLG1DQUFxQzs7Ozs7SUFDckMscUNBQW9COzs7OztJQUNwQix1Q0FBcUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkNoYW5nZXMsIEhvc3RCaW5kaW5nLCBFbGVtZW50UmVmLCBJbmplY3QsIE9wdGlvbmFsLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgdXBkYXRlU3ZnLCBKZGVudGljb25Db25maWcgfSBmcm9tICdqZGVudGljb24nO1xyXG5pbXBvcnQgeyBKREVOVElDT05fQ09ORklHIH0gZnJvbSAnLi9jb25maWcnO1xyXG5cclxuLy8gVXNlIHNhbWUgYXR0cmlidXRlcyBhcyBmb3IgVmFuaWxsYUpTIEpkZW50aWNvbi5cclxuLy8gdHNsaW50OmRpc2FibGU6ZGlyZWN0aXZlLXNlbGVjdG9yIG5vLWlucHV0LXJlbmFtZVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdzdmdbZGF0YS1qZGVudGljb24taGFzaF0sc3ZnW2RhdGEtamRlbnRpY29uLXZhbHVlXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTdmdKZGVudGljb25EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG5cclxuICBASW5wdXQoJ2RhdGEtamRlbnRpY29uLWhhc2gnKVxyXG4gIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLWpkZW50aWNvbi1oYXNoJylcclxuICBoYXNoOiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgnZGF0YS1qZGVudGljb24tdmFsdWUnKVxyXG4gIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLWpkZW50aWNvbi12YWx1ZScpXHJcbiAgdmFsdWU6IGFueTtcclxuXHJcbiAgQElucHV0KClcclxuICBASG9zdEJpbmRpbmcoJ2F0dHIud2lkdGgnKVxyXG4gIHdpZHRoOiBzdHJpbmcgfCBudW1iZXI7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmhlaWdodCcpXHJcbiAgaGVpZ2h0OiBzdHJpbmcgfCBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZjxTVkdTVkdFbGVtZW50PixcclxuICAgIHByaXZhdGUgem9uZTogTmdab25lLFxyXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChKREVOVElDT05fQ09ORklHKSBwcml2YXRlIGNvbmZpZzogSmRlbnRpY29uQ29uZmlnLFxyXG4gICkgeyB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xyXG4gICAgLy8gc2V0VGltZW91dCBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IEFuZ3VsYXIgaGFzIHVwZGF0ZWQgdGhlIGhvc3QgYXR0cmlidXRlcy5cclxuICAgIC8vIHJ1bk91dHNpZGVBbmd1bGFyIGlzIHVzZWQgdG8gcHJldmVudCBhbiBhZGRpdGlvbmFsIEFuZ3VsYXIgY2hhbmdlIGRldGVjdGlvbi5cclxuICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHVwZGF0ZVN2Zyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHVuZGVmaW5lZCwgdGhpcy5jb25maWcpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIl19
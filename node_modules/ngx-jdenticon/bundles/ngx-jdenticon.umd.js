(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('jdenticon')) :
    typeof define === 'function' && define.amd ? define('ngx-jdenticon', ['exports', '@angular/core', 'jdenticon'], factory) :
    (global = global || self, factory(global['ngx-jdenticon'] = {}, global.ng.core, global.jdenticon));
}(this, (function (exports, core, jdenticon) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/config.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var JDENTICON_CONFIG = new core.InjectionToken('JdenticonConfig');

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/svg-jdenticon.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // Use same attributes as for VanillaJS Jdenticon.
    // tslint:disable:directive-selector no-input-rename
    var SvgJdenticonDirective = /** @class */ (function () {
        function SvgJdenticonDirective(el, zone, config) {
            this.el = el;
            this.zone = zone;
            this.config = config;
        }
        /**
         * @return {?}
         */
        SvgJdenticonDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            var _this = this;
            // setTimeout is used to ensure that Angular has updated the host attributes.
            // runOutsideAngular is used to prevent an additional Angular change detection.
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    jdenticon.updateSvg(_this.el.nativeElement, undefined, _this.config);
                }));
            }));
        };
        SvgJdenticonDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'svg[data-jdenticon-hash],svg[data-jdenticon-value]',
                    },] }
        ];
        /** @nocollapse */
        SvgJdenticonDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.NgZone },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [JDENTICON_CONFIG,] }] }
        ]; };
        SvgJdenticonDirective.propDecorators = {
            hash: [{ type: core.Input, args: ['data-jdenticon-hash',] }, { type: core.HostBinding, args: ['attr.data-jdenticon-hash',] }],
            value: [{ type: core.Input, args: ['data-jdenticon-value',] }, { type: core.HostBinding, args: ['attr.data-jdenticon-value',] }],
            width: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.width',] }],
            height: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.height',] }]
        };
        return SvgJdenticonDirective;
    }());
    if (false) {
        /** @type {?} */
        SvgJdenticonDirective.prototype.hash;
        /** @type {?} */
        SvgJdenticonDirective.prototype.value;
        /** @type {?} */
        SvgJdenticonDirective.prototype.width;
        /** @type {?} */
        SvgJdenticonDirective.prototype.height;
        /**
         * @type {?}
         * @private
         */
        SvgJdenticonDirective.prototype.el;
        /**
         * @type {?}
         * @private
         */
        SvgJdenticonDirective.prototype.zone;
        /**
         * @type {?}
         * @private
         */
        SvgJdenticonDirective.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/canvas-jdenticon.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // Use same attributes as for VanillaJS Jdenticon.
    // tslint:disable:directive-selector no-input-rename
    var CanvasJdenticonDirective = /** @class */ (function () {
        function CanvasJdenticonDirective(el, zone, config) {
            this.el = el;
            this.zone = zone;
            this.config = config;
        }
        /**
         * @return {?}
         */
        CanvasJdenticonDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            var _this = this;
            // setTimeout is used to ensure that Angular has updated the host attributes.
            // runOutsideAngular is used to prevent an additional Angular change detection.
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    jdenticon.updateCanvas(_this.el.nativeElement, undefined, _this.config);
                }));
            }));
        };
        CanvasJdenticonDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'canvas[data-jdenticon-hash],canvas[data-jdenticon-value]',
                    },] }
        ];
        /** @nocollapse */
        CanvasJdenticonDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.NgZone },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [JDENTICON_CONFIG,] }] }
        ]; };
        CanvasJdenticonDirective.propDecorators = {
            hash: [{ type: core.Input, args: ['data-jdenticon-hash',] }, { type: core.HostBinding, args: ['attr.data-jdenticon-hash',] }],
            value: [{ type: core.Input, args: ['data-jdenticon-value',] }, { type: core.HostBinding, args: ['attr.data-jdenticon-value',] }],
            width: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.width',] }],
            height: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.height',] }]
        };
        return CanvasJdenticonDirective;
    }());
    if (false) {
        /** @type {?} */
        CanvasJdenticonDirective.prototype.hash;
        /** @type {?} */
        CanvasJdenticonDirective.prototype.value;
        /** @type {?} */
        CanvasJdenticonDirective.prototype.width;
        /** @type {?} */
        CanvasJdenticonDirective.prototype.height;
        /**
         * @type {?}
         * @private
         */
        CanvasJdenticonDirective.prototype.el;
        /**
         * @type {?}
         * @private
         */
        CanvasJdenticonDirective.prototype.zone;
        /**
         * @type {?}
         * @private
         */
        CanvasJdenticonDirective.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ngx-jdenticon.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxJdenticonModule = /** @class */ (function () {
        function NgxJdenticonModule() {
        }
        NgxJdenticonModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [SvgJdenticonDirective, CanvasJdenticonDirective],
                        exports: [SvgJdenticonDirective, CanvasJdenticonDirective]
                    },] }
        ];
        return NgxJdenticonModule;
    }());

    exports.CanvasJdenticonDirective = CanvasJdenticonDirective;
    exports.JDENTICON_CONFIG = JDENTICON_CONFIG;
    exports.NgxJdenticonModule = NgxJdenticonModule;
    exports.SvgJdenticonDirective = SvgJdenticonDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-jdenticon.umd.js.map

import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
import { QRCode } from './lib/qr-decoder/qrcode';
import * as ɵngcc0 from '@angular/core';
export declare class QrScannerComponent implements OnInit, OnDestroy, AfterViewInit {
    private renderer;
    canvasWidth: number;
    canvasHeight: number;
    debug: boolean;
    stopAfterScan: boolean;
    updateTime: number;
    capturedQr: EventEmitter<string>;
    foundCameras: EventEmitter<MediaDeviceInfo[]>;
    videoWrapper: ElementRef;
    qrCanvas: ElementRef;
    chooseCamera: Subject<MediaDeviceInfo>;
    private chooseCamera$;
    gCtx: CanvasRenderingContext2D;
    videoElement: HTMLVideoElement;
    qrCode: QRCode;
    stream: MediaStream;
    captureTimeout: any;
    private canvasHidden;
    readonly isCanvasSupported: boolean;
    constructor(renderer: Renderer2);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    startScanning(device: MediaDeviceInfo): void;
    stopScanning(): void;
    getMediaDevices(): Promise<MediaDeviceInfo[]>;
    QrDecodeCallback(decoded: string): void;
    private captureToCanvas;
    private setStream;
    private useDevice;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<QrScannerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<QrScannerComponent, "qr-scanner", never, { "canvasWidth": "canvasWidth"; "canvasHeight": "canvasHeight"; "debug": "debug"; "stopAfterScan": "stopAfterScan"; "updateTime": "updateTime"; "chooseCamera": "chooseCamera"; }, { "capturedQr": "capturedQr"; "foundCameras": "foundCameras"; }, never, never>;
}

//# sourceMappingURL=qr-scanner.component.d.ts.map
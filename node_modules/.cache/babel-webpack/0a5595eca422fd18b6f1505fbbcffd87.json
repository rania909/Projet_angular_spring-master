{"ast":null,"code":"'use strict';\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers;\n  Chart.elements = {};\n\n  Chart.Element = function (configuration) {\n    helpers.extend(this, configuration);\n    this.initialize.apply(this, arguments);\n  };\n\n  helpers.extend(Chart.Element.prototype, {\n    initialize: function initialize() {\n      this.hidden = false;\n    },\n    pivot: function pivot() {\n      var me = this;\n\n      if (!me._view) {\n        me._view = helpers.clone(me._model);\n      }\n\n      me._start = helpers.clone(me._view);\n      return me;\n    },\n    transition: function transition(ease) {\n      var me = this;\n\n      if (!me._view) {\n        me._view = helpers.clone(me._model);\n      } // No animation -> No Transition\n\n\n      if (ease === 1) {\n        me._view = me._model;\n        me._start = null;\n        return me;\n      }\n\n      if (!me._start) {\n        me.pivot();\n      }\n\n      helpers.each(me._model, function (value, key) {\n        if (key[0] === '_') {// Only non-underscored properties\n          // Init if doesn't exist\n        } else if (!me._view.hasOwnProperty(key)) {\n          if (typeof value === 'number' && !isNaN(me._view[key])) {\n            me._view[key] = value * ease;\n          } else {\n            me._view[key] = value;\n          } // No unnecessary computations\n\n        } else if (value === me._view[key]) {// It's the same! Woohoo!\n          // Color transitions if possible\n        } else if (typeof value === 'string') {\n          try {\n            var color = helpers.color(me._model[key]).mix(helpers.color(me._start[key]), ease);\n            me._view[key] = color.rgbString();\n          } catch (err) {\n            me._view[key] = value;\n          } // Number transitions\n\n        } else if (typeof value === 'number') {\n          var startVal = me._start[key] !== undefined && isNaN(me._start[key]) === false ? me._start[key] : 0;\n          me._view[key] = (me._model[key] - startVal) * ease + startVal; // Everything else\n        } else {\n          me._view[key] = value;\n        }\n      }, me);\n      return me;\n    },\n    tooltipPosition: function tooltipPosition() {\n      return {\n        x: this._model.x,\n        y: this._model.y\n      };\n    },\n    hasValue: function hasValue() {\n      return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);\n    }\n  });\n  Chart.Element.extend = helpers.inherits;\n};","map":null,"metadata":{},"sourceType":"script"}
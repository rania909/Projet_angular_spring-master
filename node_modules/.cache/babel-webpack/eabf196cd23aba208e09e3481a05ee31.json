{"ast":null,"code":"'use strict';\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers;\n  Chart.defaults.global.plugins = {};\n  /**\n   * The plugin service singleton\n   * @namespace Chart.plugins\n   * @since 2.1.0\n   */\n\n  Chart.plugins = {\n    /**\n     * Globally registered plugins.\n     * @private\n     */\n    _plugins: [],\n\n    /**\n     * This identifier is used to invalidate the descriptors cache attached to each chart\n     * when a global plugin is registered or unregistered. In this case, the cache ID is\n     * incremented and descriptors are regenerated during following API calls.\n     * @private\n     */\n    _cacheId: 0,\n\n    /**\n     * Registers the given plugin(s) if not already registered.\n     * @param {Array|Object} plugins plugin instance(s).\n     */\n    register: function register(plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        if (p.indexOf(plugin) === -1) {\n          p.push(plugin);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Unregisters the given plugin(s) only if registered.\n     * @param {Array|Object} plugins plugin instance(s).\n     */\n    unregister: function unregister(plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        var idx = p.indexOf(plugin);\n\n        if (idx !== -1) {\n          p.splice(idx, 1);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Remove all registered plugins.\n     * @since 2.1.5\n     */\n    clear: function clear() {\n      this._plugins = [];\n      this._cacheId++;\n    },\n\n    /**\n     * Returns the number of registered plugins?\n     * @returns {Number}\n     * @since 2.1.5\n     */\n    count: function count() {\n      return this._plugins.length;\n    },\n\n    /**\n     * Returns all registered plugin instances.\n     * @returns {Array} array of plugin objects.\n     * @since 2.1.5\n     */\n    getAll: function getAll() {\n      return this._plugins;\n    },\n\n    /**\n     * Calls enabled plugins for `chart` on the specified hook and with the given args.\n     * This method immediately returns as soon as a plugin explicitly returns false. The\n     * returned value can be used, for instance, to interrupt the current action.\n     * @param {Object} chart - The chart instance for which plugins should be called.\n     * @param {String} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n     * @param {Array} [args] - Extra arguments to apply to the hook call.\n     * @returns {Boolean} false if any of the plugins return false, else returns true.\n     */\n    notify: function notify(chart, hook, args) {\n      var descriptors = this.descriptors(chart);\n      var ilen = descriptors.length;\n      var i, descriptor, plugin, params, method;\n\n      for (i = 0; i < ilen; ++i) {\n        descriptor = descriptors[i];\n        plugin = descriptor.plugin;\n        method = plugin[hook];\n\n        if (typeof method === 'function') {\n          params = [chart].concat(args || []);\n          params.push(descriptor.options);\n\n          if (method.apply(plugin, params) === false) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns descriptors of enabled plugins for the given chart.\n     * @returns {Array} [{ plugin, options }]\n     * @private\n     */\n    descriptors: function descriptors(chart) {\n      var cache = chart._plugins || (chart._plugins = {});\n\n      if (cache.id === this._cacheId) {\n        return cache.descriptors;\n      }\n\n      var plugins = [];\n      var descriptors = [];\n      var config = chart && chart.config || {};\n      var defaults = Chart.defaults.global.plugins;\n      var options = config.options && config.options.plugins || {};\n\n      this._plugins.concat(config.plugins || []).forEach(function (plugin) {\n        var idx = plugins.indexOf(plugin);\n\n        if (idx !== -1) {\n          return;\n        }\n\n        var id = plugin.id;\n        var opts = options[id];\n\n        if (opts === false) {\n          return;\n        }\n\n        if (opts === true) {\n          opts = helpers.clone(defaults[id]);\n        }\n\n        plugins.push(plugin);\n        descriptors.push({\n          plugin: plugin,\n          options: opts || {}\n        });\n      });\n\n      cache.descriptors = descriptors;\n      cache.id = this._cacheId;\n      return descriptors;\n    }\n  };\n  /**\n   * Plugin extension hooks.\n   * @interface IPlugin\n   * @since 2.1.0\n   */\n\n  /**\n   * @method IPlugin#beforeInit\n   * @desc Called before initializing `chart`.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#afterInit\n   * @desc Called after `chart` has been initialized and before the first update.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#beforeUpdate\n   * @desc Called before updating `chart`. If any plugin returns `false`, the update\n   * is cancelled (and thus subsequent render(s)) until another `update` is triggered.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   * @returns {Boolean} `false` to cancel the chart update.\n   */\n\n  /**\n   * @method IPlugin#afterUpdate\n   * @desc Called after `chart` has been updated and before rendering. Note that this\n   * hook will not be called if the chart update has been previously cancelled.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#beforeDatasetsUpdate\n  \t * @desc Called before updating the `chart` datasets. If any plugin returns `false`,\n   * the datasets update is cancelled until another `update` is triggered.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   * @returns {Boolean} false to cancel the datasets update.\n   * @since version 2.1.5\n   */\n\n  /**\n   * @method IPlugin#afterDatasetsUpdate\n   * @desc Called after the `chart` datasets have been updated. Note that this hook\n   * will not be called if the datasets update has been previously cancelled.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   * @since version 2.1.5\n   */\n\n  /**\n   * @method IPlugin#beforeLayout\n   * @desc Called before laying out `chart`. If any plugin returns `false`,\n   * the layout update is cancelled until another `update` is triggered.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   * @returns {Boolean} `false` to cancel the chart layout.\n   */\n\n  /**\n   * @method IPlugin#afterLayout\n   * @desc Called after the `chart` has been layed out. Note that this hook will not\n   * be called if the layout update has been previously cancelled.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#beforeRender\n   * @desc Called before rendering `chart`. If any plugin returns `false`,\n   * the rendering is cancelled until another `render` is triggered.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   * @returns {Boolean} `false` to cancel the chart rendering.\n   */\n\n  /**\n   * @method IPlugin#afterRender\n   * @desc Called after the `chart` has been fully rendered (and animation completed). Note\n   * that this hook will not be called if the rendering has been previously cancelled.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#beforeDraw\n   * @desc Called before drawing `chart` at every animation frame specified by the given\n   * easing value. If any plugin returns `false`, the frame drawing is cancelled until\n   * another `render` is triggered.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n   * @param {Object} options - The plugin options.\n   * @returns {Boolean} `false` to cancel the chart drawing.\n   */\n\n  /**\n   * @method IPlugin#afterDraw\n   * @desc Called after the `chart` has been drawn for the specific easing value. Note\n   * that this hook will not be called if the drawing has been previously cancelled.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#beforeDatasetsDraw\n  \t * @desc Called before drawing the `chart` datasets. If any plugin returns `false`,\n   * the datasets drawing is cancelled until another `render` is triggered.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n   * @param {Object} options - The plugin options.\n   * @returns {Boolean} `false` to cancel the chart datasets drawing.\n   */\n\n  /**\n   * @method IPlugin#afterDatasetsDraw\n   * @desc Called after the `chart` datasets have been drawn. Note that this hook\n   * will not be called if the datasets drawing has been previously cancelled.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#beforeEvent\n  \t * @desc Called before processing the specified `event`. If any plugin returns `false`,\n   * the event will be discarded.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {IEvent} event - The event object.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#afterEvent\n   * @desc Called after the `event` has been consumed. Note that this hook\n   * will not be called if the `event` has been previously discarded.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {IEvent} event - The event object.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#resize\n   * @desc Called after the chart as been resized.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Number} size - The new canvas display size (eq. canvas.style width & height).\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#destroy\n   * @desc Called after the chart as been destroyed.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * Provided for backward compatibility, use Chart.plugins instead\n   * @namespace Chart.pluginService\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.pluginService = Chart.plugins;\n  /**\n   * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n   * effect, instead simply create/register plugins via plain JavaScript objects.\n   * @interface Chart.PluginBase\n   * @deprecated since version 2.5.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.PluginBase = helpers.inherits({});\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers;\n  Chart.defaults.scale = {\n    display: true,\n    position: 'left',\n    // grid line settings\n    gridLines: {\n      display: true,\n      color: 'rgba(0, 0, 0, 0.1)',\n      lineWidth: 1,\n      drawBorder: true,\n      drawOnChartArea: true,\n      drawTicks: true,\n      tickMarkLength: 10,\n      zeroLineWidth: 1,\n      zeroLineColor: 'rgba(0,0,0,0.25)',\n      offsetGridLines: false,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    // scale label\n    scaleLabel: {\n      // actual label\n      labelString: '',\n      // display property\n      display: false\n    },\n    // label settings\n    ticks: {\n      beginAtZero: false,\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: false,\n      padding: 0,\n      reverse: false,\n      display: true,\n      autoSkip: true,\n      autoSkipPadding: 0,\n      labelOffset: 0,\n      // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n      callback: Chart.Ticks.formatters.values\n    }\n  };\n\n  function computeTextSize(context, tick, font) {\n    return helpers.isArray(tick) ? helpers.longestText(context, font, tick) : context.measureText(tick).width;\n  }\n\n  function parseFontOptions(options) {\n    var getValueOrDefault = helpers.getValueOrDefault;\n    var globalDefaults = Chart.defaults.global;\n    var size = getValueOrDefault(options.fontSize, globalDefaults.defaultFontSize);\n    var style = getValueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);\n    var family = getValueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);\n    return {\n      size: size,\n      style: style,\n      family: family,\n      font: helpers.fontString(size, style, family)\n    };\n  }\n\n  Chart.Scale = Chart.Element.extend({\n    /**\n     * Get the padding needed for the scale\n     * @method getPadding\n     * @private\n     * @returns {Padding} the necessary padding\n     */\n    getPadding: function getPadding() {\n      var me = this;\n      return {\n        left: me.paddingLeft || 0,\n        top: me.paddingTop || 0,\n        right: me.paddingRight || 0,\n        bottom: me.paddingBottom || 0\n      };\n    },\n    // These methods are ordered by lifecyle. Utilities then follow.\n    // Any function defined here is inherited by all scale types.\n    // Any function can be extended by the scale type\n    beforeUpdate: function beforeUpdate() {\n      helpers.callCallback(this.options.beforeUpdate, [this]);\n    },\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = helpers.extend({\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, margins);\n      me.longestTextCache = me.longestTextCache || {}; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Data min/max\n\n      me.beforeDataLimits();\n      me.determineDataLimits();\n      me.afterDataLimits(); // Ticks\n\n      me.beforeBuildTicks();\n      me.buildTicks();\n      me.afterBuildTicks();\n      me.beforeTickToLabelConversion();\n      me.convertTicksToLabels();\n      me.afterTickToLabelConversion(); // Tick Rotation\n\n      me.beforeCalculateTickRotation();\n      me.calculateTickRotation();\n      me.afterCalculateTickRotation(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: function afterUpdate() {\n      helpers.callCallback(this.options.afterUpdate, [this]);\n    },\n    //\n    beforeSetDimensions: function beforeSetDimensions() {\n      helpers.callCallback(this.options.beforeSetDimensions, [this]);\n    },\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0;\n    },\n    afterSetDimensions: function afterSetDimensions() {\n      helpers.callCallback(this.options.afterSetDimensions, [this]);\n    },\n    // Data limits\n    beforeDataLimits: function beforeDataLimits() {\n      helpers.callCallback(this.options.beforeDataLimits, [this]);\n    },\n    determineDataLimits: helpers.noop,\n    afterDataLimits: function afterDataLimits() {\n      helpers.callCallback(this.options.afterDataLimits, [this]);\n    },\n    //\n    beforeBuildTicks: function beforeBuildTicks() {\n      helpers.callCallback(this.options.beforeBuildTicks, [this]);\n    },\n    buildTicks: helpers.noop,\n    afterBuildTicks: function afterBuildTicks() {\n      helpers.callCallback(this.options.afterBuildTicks, [this]);\n    },\n    beforeTickToLabelConversion: function beforeTickToLabelConversion() {\n      helpers.callCallback(this.options.beforeTickToLabelConversion, [this]);\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this; // Convert ticks to strings\n\n      var tickOpts = me.options.ticks;\n      me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback);\n    },\n    afterTickToLabelConversion: function afterTickToLabelConversion() {\n      helpers.callCallback(this.options.afterTickToLabelConversion, [this]);\n    },\n    //\n    beforeCalculateTickRotation: function beforeCalculateTickRotation() {\n      helpers.callCallback(this.options.beforeCalculateTickRotation, [this]);\n    },\n    calculateTickRotation: function calculateTickRotation() {\n      var me = this;\n      var context = me.ctx;\n      var tickOpts = me.options.ticks; // Get the width of each grid by calculating the difference\n      // between x offsets between 0 and 1.\n\n      var tickFont = parseFontOptions(tickOpts);\n      context.font = tickFont.font;\n      var labelRotation = tickOpts.minRotation || 0;\n\n      if (me.options.display && me.isHorizontal()) {\n        var originalLabelWidth = helpers.longestText(context, tickFont.font, me.ticks, me.longestTextCache);\n        var labelWidth = originalLabelWidth;\n        var cosRotation;\n        var sinRotation; // Allow 3 pixels x2 padding either side for label readability\n\n        var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6; // Max label rotation can be set or default to 90 - also act as a loop counter\n\n        while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {\n          var angleRadians = helpers.toRadians(labelRotation);\n          cosRotation = Math.cos(angleRadians);\n          sinRotation = Math.sin(angleRadians);\n\n          if (sinRotation * originalLabelWidth > me.maxHeight) {\n            // go back one step\n            labelRotation--;\n            break;\n          }\n\n          labelRotation++;\n          labelWidth = cosRotation * originalLabelWidth;\n        }\n      }\n\n      me.labelRotation = labelRotation;\n    },\n    afterCalculateTickRotation: function afterCalculateTickRotation() {\n      helpers.callCallback(this.options.afterCalculateTickRotation, [this]);\n    },\n    //\n    beforeFit: function beforeFit() {\n      helpers.callCallback(this.options.beforeFit, [this]);\n    },\n    fit: function fit() {\n      var me = this; // Reset\n\n      var minSize = me.minSize = {\n        width: 0,\n        height: 0\n      };\n      var opts = me.options;\n      var tickOpts = opts.ticks;\n      var scaleLabelOpts = opts.scaleLabel;\n      var gridLineOpts = opts.gridLines;\n      var display = opts.display;\n      var isHorizontal = me.isHorizontal();\n      var tickFont = parseFontOptions(tickOpts);\n      var scaleLabelFontSize = parseFontOptions(scaleLabelOpts).size * 1.5;\n      var tickMarkLength = opts.gridLines.tickMarkLength; // Width\n\n      if (isHorizontal) {\n        // subtract the margins to line up with the chartArea if we are a full width scale\n        minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;\n      } else {\n        minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n      } // height\n\n\n      if (isHorizontal) {\n        minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n      } else {\n        minSize.height = me.maxHeight; // fill all the height\n      } // Are we showing a title for the scale?\n\n\n      if (scaleLabelOpts.display && display) {\n        if (isHorizontal) {\n          minSize.height += scaleLabelFontSize;\n        } else {\n          minSize.width += scaleLabelFontSize;\n        }\n      } // Don't bother fitting the ticks if we are not showing them\n\n\n      if (tickOpts.display && display) {\n        var largestTextWidth = helpers.longestText(me.ctx, tickFont.font, me.ticks, me.longestTextCache);\n        var tallestLabelHeightInLines = helpers.numberOfLabelLines(me.ticks);\n        var lineSpace = tickFont.size * 0.5;\n\n        if (isHorizontal) {\n          // A horizontal axis is more constrained by the height.\n          me.longestLabelWidth = largestTextWidth;\n          var angleRadians = helpers.toRadians(me.labelRotation);\n          var cosRotation = Math.cos(angleRadians);\n          var sinRotation = Math.sin(angleRadians); // TODO - improve this calculation\n\n          var labelHeight = sinRotation * largestTextWidth + tickFont.size * tallestLabelHeightInLines + lineSpace * tallestLabelHeightInLines;\n          minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight);\n          me.ctx.font = tickFont.font;\n          var firstTick = me.ticks[0];\n          var firstLabelWidth = computeTextSize(me.ctx, firstTick, tickFont.font);\n          var lastTick = me.ticks[me.ticks.length - 1];\n          var lastLabelWidth = computeTextSize(me.ctx, lastTick, tickFont.font); // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned which means that the right padding is dominated\n          // by the font height\n\n          if (me.labelRotation !== 0) {\n            me.paddingLeft = opts.position === 'bottom' ? cosRotation * firstLabelWidth + 3 : cosRotation * lineSpace + 3; // add 3 px to move away from canvas edges\n\n            me.paddingRight = opts.position === 'bottom' ? cosRotation * lineSpace + 3 : cosRotation * lastLabelWidth + 3;\n          } else {\n            me.paddingLeft = firstLabelWidth / 2 + 3; // add 3 px to move away from canvas edges\n\n            me.paddingRight = lastLabelWidth / 2 + 3;\n          }\n        } else {\n          // A vertical axis is more constrained by the width. Labels are the dominant factor here, so get that length first\n          // Account for padding\n          if (tickOpts.mirror) {\n            largestTextWidth = 0;\n          } else {\n            largestTextWidth += me.options.ticks.padding;\n          }\n\n          minSize.width += largestTextWidth;\n          me.paddingTop = tickFont.size / 2;\n          me.paddingBottom = tickFont.size / 2;\n        }\n      }\n\n      me.handleMargins();\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n\n    /**\n     * Handle margins and padding interactions\n     * @private\n     */\n    handleMargins: function handleMargins() {\n      var me = this;\n\n      if (me.margins) {\n        me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);\n        me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);\n        me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);\n        me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);\n      }\n    },\n    afterFit: function afterFit() {\n      helpers.callCallback(this.options.afterFit, [this]);\n    },\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    },\n    isFullWidth: function isFullWidth() {\n      return this.options.fullWidth;\n    },\n    // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not\n    getRightValue: function getRightValue(rawValue) {\n      // Null and undefined values first\n      if (rawValue === null || typeof rawValue === 'undefined') {\n        return NaN;\n      } // isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values\n\n\n      if (typeof rawValue === 'number' && !isFinite(rawValue)) {\n        return NaN;\n      } // If it is in fact an object, dive in one more level\n\n\n      if (typeof rawValue === 'object') {\n        if (rawValue instanceof Date || rawValue.isValid) {\n          return rawValue;\n        }\n\n        return this.getRightValue(this.isHorizontal() ? rawValue.x : rawValue.y);\n      } // Value is good, return it\n\n\n      return rawValue;\n    },\n    // Used to get the value to display in the tooltip for the data at the given index\n    // function getLabelForIndex(index, datasetIndex)\n    getLabelForIndex: helpers.noop,\n    // Used to get data value locations.  Value can either be an index or a numerical value\n    getPixelForValue: helpers.noop,\n    // Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n    getValueForPixel: helpers.noop,\n    // Used for tick location, should\n    getPixelForTick: function getPixelForTick(index, includeOffset) {\n      var me = this;\n\n      if (me.isHorizontal()) {\n        var innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n        var tickWidth = innerWidth / Math.max(me.ticks.length - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);\n        var pixel = tickWidth * index + me.paddingLeft;\n\n        if (includeOffset) {\n          pixel += tickWidth / 2;\n        }\n\n        var finalVal = me.left + Math.round(pixel);\n        finalVal += me.isFullWidth() ? me.margins.left : 0;\n        return finalVal;\n      }\n\n      var innerHeight = me.height - (me.paddingTop + me.paddingBottom);\n      return me.top + index * (innerHeight / (me.ticks.length - 1));\n    },\n    // Utility for getting the pixel location of a percentage of scale\n    getPixelForDecimal: function getPixelForDecimal(decimal\n    /* , includeOffset*/\n    ) {\n      var me = this;\n\n      if (me.isHorizontal()) {\n        var innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n        var valueOffset = innerWidth * decimal + me.paddingLeft;\n        var finalVal = me.left + Math.round(valueOffset);\n        finalVal += me.isFullWidth() ? me.margins.left : 0;\n        return finalVal;\n      }\n\n      return me.top + decimal * me.height;\n    },\n    getBasePixel: function getBasePixel() {\n      return this.getPixelForValue(this.getBaseValue());\n    },\n    getBaseValue: function getBaseValue() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    },\n    // Actually draw the scale on the canvas\n    // @param {rectangle} chartArea : the area of the chart to draw full grid lines on\n    draw: function draw(chartArea) {\n      var me = this;\n      var options = me.options;\n\n      if (!options.display) {\n        return;\n      }\n\n      var context = me.ctx;\n      var globalDefaults = Chart.defaults.global;\n      var optionTicks = options.ticks;\n      var gridLines = options.gridLines;\n      var scaleLabel = options.scaleLabel;\n      var isRotated = me.labelRotation !== 0;\n      var skipRatio;\n      var useAutoskipper = optionTicks.autoSkip;\n      var isHorizontal = me.isHorizontal(); // figure out the maximum number of gridlines to show\n\n      var maxTicks;\n\n      if (optionTicks.maxTicksLimit) {\n        maxTicks = optionTicks.maxTicksLimit;\n      }\n\n      var tickFontColor = helpers.getValueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);\n      var tickFont = parseFontOptions(optionTicks);\n      var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;\n      var borderDash = helpers.getValueOrDefault(gridLines.borderDash, globalDefaults.borderDash);\n      var borderDashOffset = helpers.getValueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);\n      var scaleLabelFontColor = helpers.getValueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);\n      var scaleLabelFont = parseFontOptions(scaleLabel);\n      var labelRotationRadians = helpers.toRadians(me.labelRotation);\n      var cosRotation = Math.cos(labelRotationRadians);\n      var longestRotatedLabel = me.longestLabelWidth * cosRotation; // Make sure we draw text in the correct color and font\n\n      context.fillStyle = tickFontColor;\n      var itemsToDraw = [];\n\n      if (isHorizontal) {\n        skipRatio = false; // Only calculate the skip ratio with the half width of longestRotateLabel if we got an actual rotation\n        // See #2584\n\n        if (isRotated) {\n          longestRotatedLabel /= 2;\n        }\n\n        if ((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length > me.width - (me.paddingLeft + me.paddingRight)) {\n          skipRatio = 1 + Math.floor((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length / (me.width - (me.paddingLeft + me.paddingRight)));\n        } // if they defined a max number of optionTicks,\n        // increase skipRatio until that number is met\n\n\n        if (maxTicks && me.ticks.length > maxTicks) {\n          while (!skipRatio || me.ticks.length / (skipRatio || 1) > maxTicks) {\n            if (!skipRatio) {\n              skipRatio = 1;\n            }\n\n            skipRatio += 1;\n          }\n        }\n\n        if (!useAutoskipper) {\n          skipRatio = false;\n        }\n      }\n\n      var xTickStart = options.position === 'right' ? me.left : me.right - tl;\n      var xTickEnd = options.position === 'right' ? me.left + tl : me.right;\n      var yTickStart = options.position === 'bottom' ? me.top : me.bottom - tl;\n      var yTickEnd = options.position === 'bottom' ? me.top + tl : me.bottom;\n      helpers.each(me.ticks, function (label, index) {\n        // If the callback returned a null or undefined value, do not draw this line\n        if (label === undefined || label === null) {\n          return;\n        }\n\n        var isLastTick = me.ticks.length === index + 1; // Since we always show the last tick,we need may need to hide the last shown one before\n\n        var shouldSkip = skipRatio > 1 && index % skipRatio > 0 || index % skipRatio === 0 && index + skipRatio >= me.ticks.length;\n\n        if (shouldSkip && !isLastTick || label === undefined || label === null) {\n          return;\n        }\n\n        var lineWidth, lineColor;\n\n        if (index === (typeof me.zeroLineIndex !== 'undefined' ? me.zeroLineIndex : 0)) {\n          // Draw the first index specially\n          lineWidth = gridLines.zeroLineWidth;\n          lineColor = gridLines.zeroLineColor;\n        } else {\n          lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, index);\n          lineColor = helpers.getValueAtIndexOrDefault(gridLines.color, index);\n        } // Common properties\n\n\n        var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;\n        var textAlign = 'middle';\n        var textBaseline = 'middle';\n\n        if (isHorizontal) {\n          if (options.position === 'bottom') {\n            // bottom\n            textBaseline = !isRotated ? 'top' : 'middle';\n            textAlign = !isRotated ? 'center' : 'right';\n            labelY = me.top + tl;\n          } else {\n            // top\n            textBaseline = !isRotated ? 'bottom' : 'middle';\n            textAlign = !isRotated ? 'center' : 'left';\n            labelY = me.bottom - tl;\n          }\n\n          var xLineValue = me.getPixelForTick(index) + helpers.aliasPixel(lineWidth); // xvalues for grid lines\n\n          labelX = me.getPixelForTick(index, gridLines.offsetGridLines) + optionTicks.labelOffset; // x values for optionTicks (need to consider offsetLabel option)\n\n          tx1 = tx2 = x1 = x2 = xLineValue;\n          ty1 = yTickStart;\n          ty2 = yTickEnd;\n          y1 = chartArea.top;\n          y2 = chartArea.bottom;\n        } else {\n          var isLeft = options.position === 'left';\n          var tickPadding = optionTicks.padding;\n          var labelXOffset;\n\n          if (optionTicks.mirror) {\n            textAlign = isLeft ? 'left' : 'right';\n            labelXOffset = tickPadding;\n          } else {\n            textAlign = isLeft ? 'right' : 'left';\n            labelXOffset = tl + tickPadding;\n          }\n\n          labelX = isLeft ? me.right - labelXOffset : me.left + labelXOffset;\n          var yLineValue = me.getPixelForTick(index); // xvalues for grid lines\n\n          yLineValue += helpers.aliasPixel(lineWidth);\n          labelY = me.getPixelForTick(index, gridLines.offsetGridLines);\n          tx1 = xTickStart;\n          tx2 = xTickEnd;\n          x1 = chartArea.left;\n          x2 = chartArea.right;\n          ty1 = ty2 = y1 = y2 = yLineValue;\n        }\n\n        itemsToDraw.push({\n          tx1: tx1,\n          ty1: ty1,\n          tx2: tx2,\n          ty2: ty2,\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          labelX: labelX,\n          labelY: labelY,\n          glWidth: lineWidth,\n          glColor: lineColor,\n          glBorderDash: borderDash,\n          glBorderDashOffset: borderDashOffset,\n          rotation: -1 * labelRotationRadians,\n          label: label,\n          textBaseline: textBaseline,\n          textAlign: textAlign\n        });\n      }); // Draw all of the tick labels, tick marks, and grid lines at the correct places\n\n      helpers.each(itemsToDraw, function (itemToDraw) {\n        if (gridLines.display) {\n          context.save();\n          context.lineWidth = itemToDraw.glWidth;\n          context.strokeStyle = itemToDraw.glColor;\n\n          if (context.setLineDash) {\n            context.setLineDash(itemToDraw.glBorderDash);\n            context.lineDashOffset = itemToDraw.glBorderDashOffset;\n          }\n\n          context.beginPath();\n\n          if (gridLines.drawTicks) {\n            context.moveTo(itemToDraw.tx1, itemToDraw.ty1);\n            context.lineTo(itemToDraw.tx2, itemToDraw.ty2);\n          }\n\n          if (gridLines.drawOnChartArea) {\n            context.moveTo(itemToDraw.x1, itemToDraw.y1);\n            context.lineTo(itemToDraw.x2, itemToDraw.y2);\n          }\n\n          context.stroke();\n          context.restore();\n        }\n\n        if (optionTicks.display) {\n          context.save();\n          context.translate(itemToDraw.labelX, itemToDraw.labelY);\n          context.rotate(itemToDraw.rotation);\n          context.font = tickFont.font;\n          context.textBaseline = itemToDraw.textBaseline;\n          context.textAlign = itemToDraw.textAlign;\n          var label = itemToDraw.label;\n\n          if (helpers.isArray(label)) {\n            for (var i = 0, y = 0; i < label.length; ++i) {\n              // We just make sure the multiline element is a string here..\n              context.fillText('' + label[i], 0, y); // apply same lineSpacing as calculated @ L#320\n\n              y += tickFont.size * 1.5;\n            }\n          } else {\n            context.fillText(label, 0, 0);\n          }\n\n          context.restore();\n        }\n      });\n\n      if (scaleLabel.display) {\n        // Draw the scale label\n        var scaleLabelX;\n        var scaleLabelY;\n        var rotation = 0;\n\n        if (isHorizontal) {\n          scaleLabelX = me.left + (me.right - me.left) / 2; // midpoint of the width\n\n          scaleLabelY = options.position === 'bottom' ? me.bottom - scaleLabelFont.size / 2 : me.top + scaleLabelFont.size / 2;\n        } else {\n          var isLeft = options.position === 'left';\n          scaleLabelX = isLeft ? me.left + scaleLabelFont.size / 2 : me.right - scaleLabelFont.size / 2;\n          scaleLabelY = me.top + (me.bottom - me.top) / 2;\n          rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;\n        }\n\n        context.save();\n        context.translate(scaleLabelX, scaleLabelY);\n        context.rotate(rotation);\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.fillStyle = scaleLabelFontColor; // render in correct colour\n\n        context.font = scaleLabelFont.font;\n        context.fillText(scaleLabel.labelString, 0, 0);\n        context.restore();\n      }\n\n      if (gridLines.drawBorder) {\n        // Draw the line at the edge of the axis\n        context.lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, 0);\n        context.strokeStyle = helpers.getValueAtIndexOrDefault(gridLines.color, 0);\n        var x1 = me.left,\n            x2 = me.right,\n            y1 = me.top,\n            y2 = me.bottom;\n        var aliasPixel = helpers.aliasPixel(context.lineWidth);\n\n        if (isHorizontal) {\n          y1 = y2 = options.position === 'top' ? me.bottom : me.top;\n          y1 += aliasPixel;\n          y2 += aliasPixel;\n        } else {\n          x1 = x2 = options.position === 'left' ? me.right : me.left;\n          x1 += aliasPixel;\n          x2 += aliasPixel;\n        }\n\n        context.beginPath();\n        context.moveTo(x1, y1);\n        context.lineTo(x2, y2);\n        context.stroke();\n      }\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}
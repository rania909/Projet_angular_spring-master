{"ast":null,"code":"import _createForOfIteratorHelper from \"A:/machine learning/test/Projet_angular_spring/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"A:/machine learning/test/Projet_angular_spring/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"A:/machine learning/test/Projet_angular_spring/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Component, ChangeDetectionStrategy, Renderer2, Input, ViewChild, NgModule } from '@angular/core';\nimport { toDataURL as _toDataURL, toCanvas as _toCanvas, toString } from 'qrcode';\nimport * as ɵngcc0 from '@angular/core';\nvar _c0 = [\"qrcElement\"];\n\nvar QRCodeComponent = /*#__PURE__*/function () {\n  function QRCodeComponent(renderer) {\n    _classCallCheck(this, QRCodeComponent);\n\n    this.renderer = renderer; // Deprecated\n\n    this.colordark = '';\n    this.colorlight = '';\n    this.level = '';\n    this.hidetitle = false;\n    this.size = 0;\n    this.usesvg = false; // Valid for 1.x and 2.x\n\n    this.allowEmptyString = false;\n    this.qrdata = ''; // New fields introduced in 2.0.0\n\n    this.colorDark = '#000000ff';\n    this.colorLight = '#ffffffff';\n    this.cssClass = 'qrcode';\n    this.elementType = 'canvas';\n    this.errorCorrectionLevel = 'M';\n    this.margin = 4;\n    this.scale = 4;\n    this.width = 10; // Deprecation warnings\n\n    if (this.colordark !== '') {\n      console.warn('[angularx-qrcode] colordark is deprecated, use colorDark.');\n    }\n\n    if (this.colorlight !== '') {\n      console.warn('[angularx-qrcode] colorlight is deprecated, use colorLight.');\n    }\n\n    if (this.level !== '') {\n      console.warn('[angularx-qrcode] level is deprecated, use errorCorrectionLevel.');\n    }\n\n    if (this.hidetitle !== false) {\n      console.warn('[angularx-qrcode] hidetitle is deprecated.');\n    }\n\n    if (this.size !== 0) {\n      console.warn('[angularx-qrcode] size is deprecated, use `width`. Defaults to 10.');\n    }\n\n    if (this.usesvg !== false) {\n      console.warn(\"[angularx-qrcode] usesvg is deprecated, use [elementType]=\\\"'svg'\\\".\");\n    }\n  }\n\n  _createClass(QRCodeComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this.createQRCode();\n    }\n  }, {\n    key: \"isValidQrCodeText\",\n    value: function isValidQrCodeText(data) {\n      if (this.allowEmptyString === false) {\n        return !(typeof data === 'undefined' || data === '' || data === 'null' || data === null);\n      }\n\n      return !(typeof data === 'undefined');\n    }\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _toDataURL(_this.qrdata, {\n          color: {\n            dark: _this.colorDark,\n            light: _this.colorLight\n          },\n          errorCorrectionLevel: _this.errorCorrectionLevel,\n          margin: _this.margin,\n          scale: _this.scale,\n          version: _this.version,\n          width: _this.width\n        }, function (err, url) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(url);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"toCanvas\",\n    value: function toCanvas(canvas) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _toCanvas(canvas, _this2.qrdata, {\n          color: {\n            dark: _this2.colorDark,\n            light: _this2.colorLight\n          },\n          errorCorrectionLevel: _this2.errorCorrectionLevel,\n          margin: _this2.margin,\n          scale: _this2.scale,\n          version: _this2.version,\n          width: _this2.width\n        }, function (error) {\n          if (error) {\n            reject(error);\n          } else {\n            resolve('success');\n          }\n        });\n      });\n    }\n  }, {\n    key: \"toSVG\",\n    value: function toSVG() {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        toString(_this3.qrdata, {\n          color: {\n            dark: _this3.colorDark,\n            light: _this3.colorLight\n          },\n          errorCorrectionLevel: _this3.errorCorrectionLevel,\n          margin: _this3.margin,\n          scale: _this3.scale,\n          type: 'svg',\n          version: _this3.version,\n          width: _this3.width\n        }, function (err, url) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(url);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"renderElement\",\n    value: function renderElement(element) {\n      var _iterator = _createForOfIteratorHelper(this.qrcElement.nativeElement.childNodes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var node = _step.value;\n          this.renderer.removeChild(this.qrcElement.nativeElement, node);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.renderer.appendChild(this.qrcElement.nativeElement, element);\n    }\n  }, {\n    key: \"createQRCode\",\n    value: function createQRCode() {\n      var _this4 = this;\n\n      // Set sensitive defaults\n      if (this.version && this.version > 40) {\n        console.warn('[angularx-qrcode] max value for `version` is 40');\n        this.version = 40;\n      } else if (this.version && this.version < 1) {\n        console.warn('[angularx-qrcode]`min value for `version` is 1');\n        this.version = 1;\n      } else if (this.version !== undefined && isNaN(this.version)) {\n        console.warn('[angularx-qrcode] version should be a number, defaulting to auto.');\n        this.version = undefined;\n      }\n\n      try {\n        if (!this.isValidQrCodeText(this.qrdata)) {\n          throw new Error('[angularx-qrcode] Field `qrdata` is empty, set`allowEmptyString=\"true\"` to overwrite this behaviour.');\n        }\n\n        var element;\n\n        switch (this.elementType) {\n          case 'canvas':\n            element = this.renderer.createElement('canvas');\n            this.toCanvas(element).then(function () {\n              _this4.renderElement(element);\n            }).catch(function (e) {\n              console.error('[angularx-qrcode] canvas error: ', e);\n            });\n            break;\n\n          case 'svg':\n            element = this.renderer.createElement('div');\n            this.toSVG().then(function (svgString) {\n              _this4.renderer.setProperty(element, 'innerHTML', svgString);\n\n              var innerElement = element.firstChild;\n\n              _this4.renderer.setAttribute(innerElement, 'height', \"\".concat(_this4.width));\n\n              _this4.renderer.setAttribute(innerElement, 'width', \"\".concat(_this4.width));\n\n              _this4.renderElement(innerElement);\n            }).catch(function (e) {\n              console.error('[angularx-qrcode] svg error: ', e);\n            });\n            break;\n\n          case 'url':\n          case 'img':\n          default:\n            element = this.renderer.createElement('img');\n            this.toDataURL().then(function (dataUrl) {\n              element.setAttribute('src', dataUrl);\n\n              _this4.renderElement(element);\n            }).catch(function (e) {\n              console.error('[angularx-qrcode] img/url error: ', e);\n            });\n        }\n      } catch (e) {\n        console.error('[angularx-qrcode] Error generating QR Code: ', e.message);\n      }\n    }\n  }]);\n\n  return QRCodeComponent;\n}();\n\nQRCodeComponent.ɵfac = function QRCodeComponent_Factory(t) {\n  return new (t || QRCodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nQRCodeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: QRCodeComponent,\n  selectors: [[\"qrcode\"]],\n  viewQuery: function QRCodeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);\n    }\n  },\n  inputs: {\n    colordark: \"colordark\",\n    colorlight: \"colorlight\",\n    level: \"level\",\n    hidetitle: \"hidetitle\",\n    size: \"size\",\n    usesvg: \"usesvg\",\n    allowEmptyString: \"allowEmptyString\",\n    qrdata: \"qrdata\",\n    colorDark: \"colorDark\",\n    colorLight: \"colorLight\",\n    cssClass: \"cssClass\",\n    elementType: \"elementType\",\n    errorCorrectionLevel: \"errorCorrectionLevel\",\n    margin: \"margin\",\n    scale: \"scale\",\n    width: \"width\",\n    version: \"version\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[\"qrcElement\", \"\"]],\n  template: function QRCodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.cssClass);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nQRCodeComponent.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }];\n};\n\nQRCodeComponent.propDecorators = {\n  colordark: [{\n    type: Input\n  }],\n  colorlight: [{\n    type: Input\n  }],\n  level: [{\n    type: Input\n  }],\n  hidetitle: [{\n    type: Input\n  }],\n  size: [{\n    type: Input\n  }],\n  usesvg: [{\n    type: Input\n  }],\n  allowEmptyString: [{\n    type: Input\n  }],\n  qrdata: [{\n    type: Input\n  }],\n  colorDark: [{\n    type: Input\n  }],\n  colorLight: [{\n    type: Input\n  }],\n  cssClass: [{\n    type: Input\n  }],\n  elementType: [{\n    type: Input\n  }],\n  errorCorrectionLevel: [{\n    type: Input\n  }],\n  margin: [{\n    type: Input\n  }],\n  scale: [{\n    type: Input\n  }],\n  version: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  qrcElement: [{\n    type: ViewChild,\n    args: ['qrcElement', {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QRCodeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'qrcode',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<div #qrcElement [class]=\\\"cssClass\\\"></div>\"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.Renderer2\n    }];\n  }, {\n    colordark: [{\n      type: Input\n    }],\n    colorlight: [{\n      type: Input\n    }],\n    level: [{\n      type: Input\n    }],\n    hidetitle: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    usesvg: [{\n      type: Input\n    }],\n    allowEmptyString: [{\n      type: Input\n    }],\n    qrdata: [{\n      type: Input\n    }],\n    colorDark: [{\n      type: Input\n    }],\n    colorLight: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    elementType: [{\n      type: Input\n    }],\n    errorCorrectionLevel: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    scale: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    version: [{\n      type: Input\n    }],\n    qrcElement: [{\n      type: ViewChild,\n      args: ['qrcElement', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nvar QRCodeModule = function QRCodeModule() {\n  _classCallCheck(this, QRCodeModule);\n};\n\nQRCodeModule.ɵfac = function QRCodeModule_Factory(t) {\n  return new (t || QRCodeModule)();\n};\n\nQRCodeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: QRCodeModule\n});\nQRCodeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: []\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QRCodeModule, [{\n    type: NgModule,\n    args: [{\n      providers: [],\n      declarations: [QRCodeComponent],\n      exports: [QRCodeComponent]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QRCodeModule, {\n    declarations: [QRCodeComponent],\n    exports: [QRCodeComponent]\n  });\n})();\n/*\n * Public API Surface of angularx-qrcode\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { QRCodeComponent, QRCodeModule }; //# sourceMappingURL=angularx-qrcode.js.map","map":null,"metadata":{},"sourceType":"module"}
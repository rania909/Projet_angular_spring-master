{"ast":null,"code":"'use strict';\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers;\n  Chart.defaults.global.title = {\n    display: false,\n    position: 'top',\n    fullWidth: true,\n    // marks that this box should take the full width of the canvas (pushing down other boxes)\n    fontStyle: 'bold',\n    padding: 10,\n    // actual title\n    text: ''\n  };\n  var noop = helpers.noop;\n  Chart.Title = Chart.Element.extend({\n    initialize: function initialize(config) {\n      var me = this;\n      helpers.extend(me, config); // Contains hit boxes for each dataset (in dataset order)\n\n      me.legendHitBoxes = [];\n    },\n    // These methods are ordered by lifecycle. Utilities then follow.\n    beforeUpdate: noop,\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = margins; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Labels\n\n      me.beforeBuildLabels();\n      me.buildLabels();\n      me.afterBuildLabels(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: noop,\n    //\n    beforeSetDimensions: noop,\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0; // Reset minSize\n\n      me.minSize = {\n        width: 0,\n        height: 0\n      };\n    },\n    afterSetDimensions: noop,\n    //\n    beforeBuildLabels: noop,\n    buildLabels: noop,\n    afterBuildLabels: noop,\n    //\n    beforeFit: noop,\n    fit: function fit() {\n      var me = this,\n          valueOrDefault = helpers.getValueOrDefault,\n          opts = me.options,\n          globalDefaults = Chart.defaults.global,\n          display = opts.display,\n          fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),\n          minSize = me.minSize;\n\n      if (me.isHorizontal()) {\n        minSize.width = me.maxWidth; // fill all the width\n\n        minSize.height = display ? fontSize + opts.padding * 2 : 0;\n      } else {\n        minSize.width = display ? fontSize + opts.padding * 2 : 0;\n        minSize.height = me.maxHeight; // fill all the height\n      }\n\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n    afterFit: noop,\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      var pos = this.options.position;\n      return pos === 'top' || pos === 'bottom';\n    },\n    // Actually draw the title block on the canvas\n    draw: function draw() {\n      var me = this,\n          ctx = me.ctx,\n          valueOrDefault = helpers.getValueOrDefault,\n          opts = me.options,\n          globalDefaults = Chart.defaults.global;\n\n      if (opts.display) {\n        var fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),\n            fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle),\n            fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily),\n            titleFont = helpers.fontString(fontSize, fontStyle, fontFamily),\n            rotation = 0,\n            titleX,\n            titleY,\n            top = me.top,\n            left = me.left,\n            bottom = me.bottom,\n            right = me.right,\n            maxWidth;\n        ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor); // render in correct colour\n\n        ctx.font = titleFont; // Horizontal\n\n        if (me.isHorizontal()) {\n          titleX = left + (right - left) / 2; // midpoint of the width\n\n          titleY = top + (bottom - top) / 2; // midpoint of the height\n\n          maxWidth = right - left;\n        } else {\n          titleX = opts.position === 'left' ? left + fontSize / 2 : right - fontSize / 2;\n          titleY = top + (bottom - top) / 2;\n          maxWidth = bottom - top;\n          rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);\n        }\n\n        ctx.save();\n        ctx.translate(titleX, titleY);\n        ctx.rotate(rotation);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(opts.text, 0, 0, maxWidth);\n        ctx.restore();\n      }\n    }\n  });\n\n  function createNewTitleBlockAndAttach(chartInstance, titleOpts) {\n    var title = new Chart.Title({\n      ctx: chartInstance.chart.ctx,\n      options: titleOpts,\n      chart: chartInstance\n    });\n    chartInstance.titleBlock = title;\n    Chart.layoutService.addBox(chartInstance, title);\n  } // Register the title plugin\n\n\n  Chart.plugins.register({\n    beforeInit: function beforeInit(chartInstance) {\n      var titleOpts = chartInstance.options.title;\n\n      if (titleOpts) {\n        createNewTitleBlockAndAttach(chartInstance, titleOpts);\n      }\n    },\n    beforeUpdate: function beforeUpdate(chartInstance) {\n      var titleOpts = chartInstance.options.title;\n\n      if (titleOpts) {\n        titleOpts = helpers.configMerge(Chart.defaults.global.title, titleOpts);\n\n        if (chartInstance.titleBlock) {\n          chartInstance.titleBlock.options = titleOpts;\n        } else {\n          createNewTitleBlockAndAttach(chartInstance, titleOpts);\n        }\n      } else {\n        Chart.layoutService.removeBox(chartInstance, chartInstance.titleBlock);\n        delete chartInstance.titleBlock;\n      }\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}
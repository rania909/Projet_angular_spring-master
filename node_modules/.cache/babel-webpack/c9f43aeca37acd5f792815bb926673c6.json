{"ast":null,"code":"/* global window: false */\n'use strict';\n\nvar moment = require('moment');\n\nmoment = typeof moment === 'function' ? moment : window.moment;\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers;\n  var time = {\n    units: [{\n      name: 'millisecond',\n      steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]\n    }, {\n      name: 'second',\n      steps: [1, 2, 5, 10, 30]\n    }, {\n      name: 'minute',\n      steps: [1, 2, 5, 10, 30]\n    }, {\n      name: 'hour',\n      steps: [1, 2, 3, 6, 12]\n    }, {\n      name: 'day',\n      steps: [1, 2, 5]\n    }, {\n      name: 'week',\n      maxStep: 4\n    }, {\n      name: 'month',\n      maxStep: 3\n    }, {\n      name: 'quarter',\n      maxStep: 4\n    }, {\n      name: 'year',\n      maxStep: false\n    }]\n  };\n  var defaultConfig = {\n    position: 'bottom',\n    time: {\n      parser: false,\n      // false == a pattern string from http://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment\n      format: false,\n      // DEPRECATED false == date objects, moment object, callback or a pattern string from http://momentjs.com/docs/#/parsing/string-format/\n      unit: false,\n      // false == automatic or override with week, month, year, etc.\n      round: false,\n      // none, or override with week, month, year, etc.\n      displayFormat: false,\n      // DEPRECATED\n      isoWeekday: false,\n      // override week start day - see http://momentjs.com/docs/#/get-set/iso-weekday/\n      minUnit: 'millisecond',\n      // defaults to unit's corresponding unitFormat below or override using pattern string from http://momentjs.com/docs/#/displaying/format/\n      displayFormats: {\n        millisecond: 'h:mm:ss.SSS a',\n        // 11:20:01.123 AM,\n        second: 'h:mm:ss a',\n        // 11:20:01 AM\n        minute: 'h:mm:ss a',\n        // 11:20:01 AM\n        hour: 'MMM D, hA',\n        // Sept 4, 5PM\n        day: 'll',\n        // Sep 4 2015\n        week: 'll',\n        // Week 46, or maybe \"[W]WW - YYYY\" ?\n        month: 'MMM YYYY',\n        // Sept 2015\n        quarter: '[Q]Q - YYYY',\n        // Q3\n        year: 'YYYY' // 2015\n\n      }\n    },\n    ticks: {\n      autoSkip: false\n    }\n  };\n  var TimeScale = Chart.Scale.extend({\n    initialize: function initialize() {\n      if (!moment) {\n        throw new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');\n      }\n\n      Chart.Scale.prototype.initialize.call(this);\n    },\n    getLabelMoment: function getLabelMoment(datasetIndex, index) {\n      if (datasetIndex === null || index === null) {\n        return null;\n      }\n\n      if (typeof this.labelMoments[datasetIndex] !== 'undefined') {\n        return this.labelMoments[datasetIndex][index];\n      }\n\n      return null;\n    },\n    getLabelDiff: function getLabelDiff(datasetIndex, index) {\n      var me = this;\n\n      if (datasetIndex === null || index === null) {\n        return null;\n      }\n\n      if (me.labelDiffs === undefined) {\n        me.buildLabelDiffs();\n      }\n\n      if (typeof me.labelDiffs[datasetIndex] !== 'undefined') {\n        return me.labelDiffs[datasetIndex][index];\n      }\n\n      return null;\n    },\n    getMomentStartOf: function getMomentStartOf(tick) {\n      var me = this;\n\n      if (me.options.time.unit === 'week' && me.options.time.isoWeekday !== false) {\n        return tick.clone().startOf('isoWeek').isoWeekday(me.options.time.isoWeekday);\n      }\n\n      return tick.clone().startOf(me.tickUnit);\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      me.labelMoments = []; // Only parse these once. If the dataset does not have data as x,y pairs, we will use\n      // these\n\n      var scaleLabelMoments = [];\n\n      if (me.chart.data.labels && me.chart.data.labels.length > 0) {\n        helpers.each(me.chart.data.labels, function (label) {\n          var labelMoment = me.parseTime(label);\n\n          if (labelMoment.isValid()) {\n            if (me.options.time.round) {\n              labelMoment.startOf(me.options.time.round);\n            }\n\n            scaleLabelMoments.push(labelMoment);\n          }\n        }, me);\n        me.firstTick = moment.min.call(me, scaleLabelMoments);\n        me.lastTick = moment.max.call(me, scaleLabelMoments);\n      } else {\n        me.firstTick = null;\n        me.lastTick = null;\n      }\n\n      helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {\n        var momentsForDataset = [];\n        var datasetVisible = me.chart.isDatasetVisible(datasetIndex);\n\n        if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {\n          helpers.each(dataset.data, function (value) {\n            var labelMoment = me.parseTime(me.getRightValue(value));\n\n            if (labelMoment.isValid()) {\n              if (me.options.time.round) {\n                labelMoment.startOf(me.options.time.round);\n              }\n\n              momentsForDataset.push(labelMoment);\n\n              if (datasetVisible) {\n                // May have gone outside the scale ranges, make sure we keep the first and last ticks updated\n                me.firstTick = me.firstTick !== null ? moment.min(me.firstTick, labelMoment) : labelMoment;\n                me.lastTick = me.lastTick !== null ? moment.max(me.lastTick, labelMoment) : labelMoment;\n              }\n            }\n          }, me);\n        } else {\n          // We have no labels. Use the ones from the scale\n          momentsForDataset = scaleLabelMoments;\n        }\n\n        me.labelMoments.push(momentsForDataset);\n      }, me); // Set these after we've done all the data\n\n      if (me.options.time.min) {\n        me.firstTick = me.parseTime(me.options.time.min);\n      }\n\n      if (me.options.time.max) {\n        me.lastTick = me.parseTime(me.options.time.max);\n      } // We will modify these, so clone for later\n\n\n      me.firstTick = (me.firstTick || moment()).clone();\n      me.lastTick = (me.lastTick || moment()).clone();\n    },\n    buildLabelDiffs: function buildLabelDiffs() {\n      var me = this;\n      me.labelDiffs = [];\n      var scaleLabelDiffs = []; // Parse common labels once\n\n      if (me.chart.data.labels && me.chart.data.labels.length > 0) {\n        helpers.each(me.chart.data.labels, function (label) {\n          var labelMoment = me.parseTime(label);\n\n          if (labelMoment.isValid()) {\n            if (me.options.time.round) {\n              labelMoment.startOf(me.options.time.round);\n            }\n\n            scaleLabelDiffs.push(labelMoment.diff(me.firstTick, me.tickUnit, true));\n          }\n        }, me);\n      }\n\n      helpers.each(me.chart.data.datasets, function (dataset) {\n        var diffsForDataset = [];\n\n        if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {\n          helpers.each(dataset.data, function (value) {\n            var labelMoment = me.parseTime(me.getRightValue(value));\n\n            if (labelMoment.isValid()) {\n              if (me.options.time.round) {\n                labelMoment.startOf(me.options.time.round);\n              }\n\n              diffsForDataset.push(labelMoment.diff(me.firstTick, me.tickUnit, true));\n            }\n          }, me);\n        } else {\n          // We have no labels. Use common ones\n          diffsForDataset = scaleLabelDiffs;\n        }\n\n        me.labelDiffs.push(diffsForDataset);\n      }, me);\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      me.ctx.save();\n      var tickFontSize = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);\n      var tickFontStyle = helpers.getValueOrDefault(me.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);\n      var tickFontFamily = helpers.getValueOrDefault(me.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);\n      var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);\n      me.ctx.font = tickLabelFont;\n      me.ticks = [];\n      me.unitScale = 1; // How much we scale the unit by, ie 2 means 2x unit per step\n\n      me.scaleSizeInUnits = 0; // How large the scale is in the base unit (seconds, minutes, etc)\n      // Set unit override if applicable\n\n      if (me.options.time.unit) {\n        me.tickUnit = me.options.time.unit || 'day';\n        me.displayFormat = me.options.time.displayFormats[me.tickUnit];\n        me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);\n        me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, 1);\n      } else {\n        // Determine the smallest needed unit of the time\n        var innerWidth = me.isHorizontal() ? me.width : me.height; // Crude approximation of what the label length might be\n\n        var tempFirstLabel = me.tickFormatFunction(me.firstTick, 0, []);\n        var tickLabelWidth = me.ctx.measureText(tempFirstLabel).width;\n        var cosRotation = Math.cos(helpers.toRadians(me.options.ticks.maxRotation));\n        var sinRotation = Math.sin(helpers.toRadians(me.options.ticks.maxRotation));\n        tickLabelWidth = tickLabelWidth * cosRotation + tickFontSize * sinRotation;\n        var labelCapacity = innerWidth / tickLabelWidth; // Start as small as possible\n\n        me.tickUnit = me.options.time.minUnit;\n        me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);\n        me.displayFormat = me.options.time.displayFormats[me.tickUnit];\n        var unitDefinitionIndex = 0;\n        var unitDefinition = time.units[unitDefinitionIndex]; // While we aren't ideal and we don't have units left\n\n        while (unitDefinitionIndex < time.units.length) {\n          // Can we scale this unit. If `false` we can scale infinitely\n          me.unitScale = 1;\n\n          if (helpers.isArray(unitDefinition.steps) && Math.ceil(me.scaleSizeInUnits / labelCapacity) < helpers.max(unitDefinition.steps)) {\n            // Use one of the predefined steps\n            for (var idx = 0; idx < unitDefinition.steps.length; ++idx) {\n              if (unitDefinition.steps[idx] >= Math.ceil(me.scaleSizeInUnits / labelCapacity)) {\n                me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, unitDefinition.steps[idx]);\n                break;\n              }\n            }\n\n            break;\n          } else if (unitDefinition.maxStep === false || Math.ceil(me.scaleSizeInUnits / labelCapacity) < unitDefinition.maxStep) {\n            // We have a max step. Scale this unit\n            me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, Math.ceil(me.scaleSizeInUnits / labelCapacity));\n            break;\n          } else {\n            // Move to the next unit up\n            ++unitDefinitionIndex;\n            unitDefinition = time.units[unitDefinitionIndex];\n            me.tickUnit = unitDefinition.name;\n            var leadingUnitBuffer = me.firstTick.diff(me.getMomentStartOf(me.firstTick), me.tickUnit, true);\n            var trailingUnitBuffer = me.getMomentStartOf(me.lastTick.clone().add(1, me.tickUnit)).diff(me.lastTick, me.tickUnit, true);\n            me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true) + leadingUnitBuffer + trailingUnitBuffer;\n            me.displayFormat = me.options.time.displayFormats[unitDefinition.name];\n          }\n        }\n      }\n\n      var roundedStart; // Only round the first tick if we have no hard minimum\n\n      if (!me.options.time.min) {\n        me.firstTick = me.getMomentStartOf(me.firstTick);\n        roundedStart = me.firstTick;\n      } else {\n        roundedStart = me.getMomentStartOf(me.firstTick);\n      } // Only round the last tick if we have no hard maximum\n\n\n      if (!me.options.time.max) {\n        var roundedEnd = me.getMomentStartOf(me.lastTick);\n        var delta = roundedEnd.diff(me.lastTick, me.tickUnit, true);\n\n        if (delta < 0) {\n          // Do not use end of because we need me to be in the next time unit\n          me.lastTick = me.getMomentStartOf(me.lastTick.add(1, me.tickUnit));\n        } else if (delta >= 0) {\n          me.lastTick = roundedEnd;\n        }\n\n        me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);\n      } // Tick displayFormat override\n\n\n      if (me.options.time.displayFormat) {\n        me.displayFormat = me.options.time.displayFormat;\n      } // first tick. will have been rounded correctly if options.time.min is not specified\n\n\n      me.ticks.push(me.firstTick.clone()); // For every unit in between the first and last moment, create a moment and add it to the ticks tick\n\n      for (var i = me.unitScale; i <= me.scaleSizeInUnits; i += me.unitScale) {\n        var newTick = roundedStart.clone().add(i, me.tickUnit); // Are we greater than the max time\n\n        if (me.options.time.max && newTick.diff(me.lastTick, me.tickUnit, true) >= 0) {\n          break;\n        }\n\n        me.ticks.push(newTick);\n      } // Always show the right tick\n\n\n      var diff = me.ticks[me.ticks.length - 1].diff(me.lastTick, me.tickUnit);\n\n      if (diff !== 0 || me.scaleSizeInUnits === 0) {\n        // this is a weird case. If the <max> option is the same as the end option, we can't just diff the times because the tick was created from the roundedStart\n        // but the last tick was not rounded.\n        if (me.options.time.max) {\n          me.ticks.push(me.lastTick.clone());\n          me.scaleSizeInUnits = me.lastTick.diff(me.ticks[0], me.tickUnit, true);\n        } else {\n          me.ticks.push(me.lastTick.clone());\n          me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);\n        }\n      }\n\n      me.ctx.restore(); // Invalidate label diffs cache\n\n      me.labelDiffs = undefined;\n    },\n    // Get tooltip label\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      var me = this;\n      var label = me.chart.data.labels && index < me.chart.data.labels.length ? me.chart.data.labels[index] : '';\n      var value = me.chart.data.datasets[datasetIndex].data[index];\n\n      if (value !== null && typeof value === 'object') {\n        label = me.getRightValue(value);\n      } // Format nicely\n\n\n      if (me.options.time.tooltipFormat) {\n        label = me.parseTime(label).format(me.options.time.tooltipFormat);\n      }\n\n      return label;\n    },\n    // Function to format an individual tick mark\n    tickFormatFunction: function tickFormatFunction(tick, index, ticks) {\n      var formattedTick = tick.format(this.displayFormat);\n      var tickOpts = this.options.ticks;\n      var callback = helpers.getValueOrDefault(tickOpts.callback, tickOpts.userCallback);\n\n      if (callback) {\n        return callback(formattedTick, index, ticks);\n      }\n\n      return formattedTick;\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this;\n      me.tickMoments = me.ticks;\n      me.ticks = me.ticks.map(me.tickFormatFunction, me);\n    },\n    getPixelForValue: function getPixelForValue(value, index, datasetIndex) {\n      var me = this;\n      var offset = null;\n\n      if (index !== undefined && datasetIndex !== undefined) {\n        offset = me.getLabelDiff(datasetIndex, index);\n      }\n\n      if (offset === null) {\n        if (!value || !value.isValid) {\n          // not already a moment object\n          value = me.parseTime(me.getRightValue(value));\n        }\n\n        if (value && value.isValid && value.isValid()) {\n          offset = value.diff(me.firstTick, me.tickUnit, true);\n        }\n      }\n\n      if (offset !== null) {\n        var decimal = offset !== 0 ? offset / me.scaleSizeInUnits : offset;\n\n        if (me.isHorizontal()) {\n          var valueOffset = me.width * decimal;\n          return me.left + Math.round(valueOffset);\n        }\n\n        var heightOffset = me.height * decimal;\n        return me.top + Math.round(heightOffset);\n      }\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.tickMoments[index], null, null);\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var innerDimension = me.isHorizontal() ? me.width : me.height;\n      var offset = (pixel - (me.isHorizontal() ? me.left : me.top)) / innerDimension;\n      offset *= me.scaleSizeInUnits;\n      return me.firstTick.clone().add(moment.duration(offset, me.tickUnit).asSeconds(), 'seconds');\n    },\n    parseTime: function parseTime(label) {\n      var me = this;\n\n      if (typeof me.options.time.parser === 'string') {\n        return moment(label, me.options.time.parser);\n      }\n\n      if (typeof me.options.time.parser === 'function') {\n        return me.options.time.parser(label);\n      } // Date objects\n\n\n      if (typeof label.getMonth === 'function' || typeof label === 'number') {\n        return moment(label);\n      } // Moment support\n\n\n      if (label.isValid && label.isValid()) {\n        return label;\n      } // Custom parsing (return an instance of moment)\n\n\n      if (typeof me.options.time.format !== 'string' && me.options.time.format.call) {\n        console.warn('options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale');\n        return me.options.time.format(label);\n      } // Moment format parsing\n\n\n      return moment(label, me.options.time.format);\n    }\n  });\n  Chart.scaleService.registerScaleType('time', TimeScale, defaultConfig);\n};","map":null,"metadata":{},"sourceType":"script"}
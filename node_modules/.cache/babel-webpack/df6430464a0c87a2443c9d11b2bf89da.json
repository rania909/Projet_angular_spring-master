{"ast":null,"code":"'use strict';\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers;\n  Chart.scaleService = {\n    // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n    // use the new chart options to grab the correct scale\n    constructors: {},\n    // Use a registration function so that we can move to an ES6 map when we no longer need to support\n    // old browsers\n    // Scale config defaults\n    defaults: {},\n    registerScaleType: function registerScaleType(type, scaleConstructor, defaults) {\n      this.constructors[type] = scaleConstructor;\n      this.defaults[type] = helpers.clone(defaults);\n    },\n    getScaleConstructor: function getScaleConstructor(type) {\n      return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n    },\n    getScaleDefaults: function getScaleDefaults(type) {\n      // Return the scale defaults merged with the global settings so that we always use the latest ones\n      return this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};\n    },\n    updateScaleDefaults: function updateScaleDefaults(type, additions) {\n      var defaults = this.defaults;\n\n      if (defaults.hasOwnProperty(type)) {\n        defaults[type] = helpers.extend(defaults[type], additions);\n      }\n    },\n    addScalesToLayout: function addScalesToLayout(chartInstance) {\n      // Adds each scale to the chart.boxes array to be sized accordingly\n      helpers.each(chartInstance.scales, function (scale) {\n        Chart.layoutService.addBox(chartInstance, scale);\n      });\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}
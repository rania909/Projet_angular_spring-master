{"ast":null,"code":"import _inherits from \"A:/machine learning/test/Projet_angular_spring/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"A:/machine learning/test/Projet_angular_spring/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"A:/machine learning/test/Projet_angular_spring/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"A:/machine learning/test/Projet_angular_spring/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1.action();\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\n\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) {}\n\nvar MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\n\nvar MatSnackBarConfig = function MatSnackBarConfig() {\n  _classCallCheck(this, MatSnackBarConfig);\n\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  this.politeness = 'assertive';\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n\n  this.announcementMessage = '';\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n\n  this.duration = 0;\n  /** Data being injected into the child component. */\n\n  this.data = null;\n  /** The horizontal position to place the snack bar. */\n\n  this.horizontalPosition = 'center';\n  /** The vertical position to place the snack bar. */\n\n  this.verticalPosition = 'bottom';\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\n\n\nvar MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\n\nvar MatSnackBarRef = /*#__PURE__*/function () {\n  function MatSnackBarRef(containerInstance, _overlayRef) {\n    var _this = this;\n\n    _classCallCheck(this, MatSnackBarRef);\n\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the snack bar action was called. */\n\n    this._onAction = new Subject();\n    /** Whether the snack bar was dismissed using the action button. */\n\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance; // Dismiss snackbar on action.\n\n    this.onAction().subscribe(function () {\n      return _this.dismiss();\n    });\n\n    containerInstance._onExit.subscribe(function () {\n      return _this._finishDismiss();\n    });\n  }\n  /** Dismisses the snack bar. */\n\n\n  _createClass(MatSnackBarRef, [{\n    key: \"dismiss\",\n    value: function dismiss() {\n      if (!this._afterDismissed.closed) {\n        this.containerInstance.exit();\n      }\n\n      clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n\n  }, {\n    key: \"dismissWithAction\",\n    value: function dismissWithAction() {\n      if (!this._onAction.closed) {\n        this._dismissedByAction = true;\n\n        this._onAction.next();\n\n        this._onAction.complete();\n      }\n\n      clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n\n  }, {\n    key: \"closeWithAction\",\n    value: function closeWithAction() {\n      this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n\n  }, {\n    key: \"_dismissAfter\",\n    value: function _dismissAfter(duration) {\n      var _this2 = this;\n\n      // Note that we need to cap the duration to the maximum value for setTimeout, because\n      // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n      this._durationTimeoutId = setTimeout(function () {\n        return _this2.dismiss();\n      }, Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n\n  }, {\n    key: \"_open\",\n    value: function _open() {\n      if (!this._afterOpened.closed) {\n        this._afterOpened.next();\n\n        this._afterOpened.complete();\n      }\n    }\n    /** Cleans up the DOM after closing. */\n\n  }, {\n    key: \"_finishDismiss\",\n    value: function _finishDismiss() {\n      this._overlayRef.dispose();\n\n      if (!this._onAction.closed) {\n        this._onAction.complete();\n      }\n\n      this._afterDismissed.next({\n        dismissedByAction: this._dismissedByAction\n      });\n\n      this._afterDismissed.complete();\n\n      this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n\n  }, {\n    key: \"afterDismissed\",\n    value: function afterDismissed() {\n      return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n\n  }, {\n    key: \"onAction\",\n    value: function onAction() {\n      return this._onAction;\n    }\n  }]);\n\n  return MatSnackBarRef;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n\n\nvar SimpleSnackBar = /*#__PURE__*/function () {\n  function SimpleSnackBar(snackBarRef, data) {\n    _classCallCheck(this, SimpleSnackBar);\n\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /** Performs the action on the snack bar. */\n\n\n  _createClass(SimpleSnackBar, [{\n    key: \"action\",\n    value: function action() {\n      this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n\n  }, {\n    key: \"hasAction\",\n    get: function get() {\n      return !!this.data.action;\n    }\n  }]);\n\n  return SimpleSnackBar;\n}();\n\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n  return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n};\n\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: SimpleSnackBar,\n  selectors: [[\"simple-snack-bar\"]],\n  hostAttrs: [1, \"mat-simple-snackbar\"],\n  decls: 3,\n  vars: 2,\n  consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n  template: function SimpleSnackBar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"span\");\n      ɵngcc0.ɵɵtext(1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc2.MatButton],\n  styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nSimpleSnackBar.ctorParameters = function () {\n  return [{\n    type: MatSnackBarRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SNACK_BAR_DATA]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n    type: Component,\n    args: [{\n      selector: 'simple-snack-bar',\n      template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-simple-snackbar'\n      },\n      styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatSnackBarRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DATA]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\n\n\nvar matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [state('void, hidden', style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), state('visible', style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n\nvar MatSnackBarContainer = /*#__PURE__*/function (_BasePortalOutlet) {\n  _inherits(MatSnackBarContainer, _BasePortalOutlet);\n\n  var _super = _createSuper(MatSnackBarContainer);\n\n  function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, _platform,\n  /** The snack bar configuration. */\n  snackBarConfig) {\n    var _this3;\n\n    _classCallCheck(this, MatSnackBarContainer);\n\n    _this3 = _super.call(this);\n    _this3._ngZone = _ngZone;\n    _this3._elementRef = _elementRef;\n    _this3._changeDetectorRef = _changeDetectorRef;\n    _this3._platform = _platform;\n    _this3.snackBarConfig = snackBarConfig;\n    /** The number of milliseconds to wait before announcing the snack bar's content. */\n\n    _this3._announceDelay = 150;\n    /** Whether the component has been destroyed. */\n\n    _this3._destroyed = false;\n    /** Subject for notifying that the snack bar has announced to screen readers. */\n\n    _this3._onAnnounce = new Subject();\n    /** Subject for notifying that the snack bar has exited from view. */\n\n    _this3._onExit = new Subject();\n    /** Subject for notifying that the snack bar has finished entering the view. */\n\n    _this3._onEnter = new Subject();\n    /** The state of the snack bar animations. */\n\n    _this3._animationState = 'void';\n    /**\n     * Attaches a DOM portal to the snack bar container.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    _this3.attachDomPortal = function (portal) {\n      _this3._assertNotAttached();\n\n      _this3._applySnackBarClasses();\n\n      return _this3._portalOutlet.attachDomPortal(portal);\n    }; // Use aria-live rather than a live role like 'alert' or 'status'\n    // because NVDA and JAWS have show inconsistent behavior with live roles.\n\n\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      _this3._live = 'assertive';\n    } else if (snackBarConfig.politeness === 'off') {\n      _this3._live = 'off';\n    } else {\n      _this3._live = 'polite';\n    } // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n    // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n\n\n    if (_this3._platform.FIREFOX) {\n      if (_this3._live === 'polite') {\n        _this3._role = 'status';\n      }\n\n      if (_this3._live === 'assertive') {\n        _this3._role = 'alert';\n      }\n    }\n\n    return _this3;\n  }\n  /** Attach a component portal as content to this snack bar container. */\n\n\n  _createClass(MatSnackBarContainer, [{\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      this._assertNotAttached();\n\n      this._applySnackBarClasses();\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      this._assertNotAttached();\n\n      this._applySnackBarClasses();\n\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n\n  }, {\n    key: \"onAnimationEnd\",\n    value: function onAnimationEnd(event) {\n      var fromState = event.fromState,\n          toState = event.toState;\n\n      if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n        this._completeExit();\n      }\n\n      if (toState === 'visible') {\n        // Note: we shouldn't use `this` inside the zone callback,\n        // because it can cause a memory leak.\n        var onEnter = this._onEnter;\n\n        this._ngZone.run(function () {\n          onEnter.next();\n          onEnter.complete();\n        });\n      }\n    }\n    /** Begin animation of snack bar entrance into view. */\n\n  }, {\n    key: \"enter\",\n    value: function enter() {\n      if (!this._destroyed) {\n        this._animationState = 'visible';\n\n        this._changeDetectorRef.detectChanges();\n\n        this._screenReaderAnnounce();\n      }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n      // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n      // `MatSnackBar.open`).\n      this._animationState = 'hidden'; // Mark this element with an 'exit' attribute to indicate that the snackbar has\n      // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n      // test harness.\n\n      this._elementRef.nativeElement.setAttribute('mat-exit', ''); // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n      // long enough to visually read it either, so clear the timeout for announcing.\n\n\n      clearTimeout(this._announceTimeoutId);\n      return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed = true;\n\n      this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n\n  }, {\n    key: \"_completeExit\",\n    value: function _completeExit() {\n      var _this4 = this;\n\n      this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(function () {\n        _this4._onExit.next();\n\n        _this4._onExit.complete();\n      });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n\n  }, {\n    key: \"_applySnackBarClasses\",\n    value: function _applySnackBarClasses() {\n      var element = this._elementRef.nativeElement;\n      var panelClasses = this.snackBarConfig.panelClass;\n\n      if (panelClasses) {\n        if (Array.isArray(panelClasses)) {\n          // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n          panelClasses.forEach(function (cssClass) {\n            return element.classList.add(cssClass);\n          });\n        } else {\n          element.classList.add(panelClasses);\n        }\n      }\n\n      if (this.snackBarConfig.horizontalPosition === 'center') {\n        element.classList.add('mat-snack-bar-center');\n      }\n\n      if (this.snackBarConfig.verticalPosition === 'top') {\n        element.classList.add('mat-snack-bar-top');\n      }\n    }\n    /** Asserts that no content is already attached to the container. */\n\n  }, {\n    key: \"_assertNotAttached\",\n    value: function _assertNotAttached() {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Attempting to attach snack bar content after content is already attached');\n      }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n\n  }, {\n    key: \"_screenReaderAnnounce\",\n    value: function _screenReaderAnnounce() {\n      var _this5 = this;\n\n      if (!this._announceTimeoutId) {\n        this._ngZone.runOutsideAngular(function () {\n          _this5._announceTimeoutId = setTimeout(function () {\n            var inertElement = _this5._elementRef.nativeElement.querySelector('[aria-hidden]');\n\n            var liveElement = _this5._elementRef.nativeElement.querySelector('[aria-live]');\n\n            if (inertElement && liveElement) {\n              // If an element in the snack bar content is focused before being moved\n              // track it and restore focus after moving to the live region.\n              var focusedElement = null;\n\n              if (_this5._platform.isBrowser && document.activeElement instanceof HTMLElement && inertElement.contains(document.activeElement)) {\n                focusedElement = document.activeElement;\n              }\n\n              inertElement.removeAttribute('aria-hidden');\n              liveElement.appendChild(inertElement);\n              focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n\n              _this5._onAnnounce.next();\n\n              _this5._onAnnounce.complete();\n            }\n          }, _this5._announceDelay);\n        });\n      }\n    }\n  }]);\n\n  return MatSnackBarContainer;\n}(BasePortalOutlet);\n\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) {\n  return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig));\n};\n\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSnackBarContainer,\n  selectors: [[\"snack-bar-container\"]],\n  viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-snack-bar-container\"],\n  hostVars: 1,\n  hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n        return ctx.onAnimationEnd($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 2,\n  consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]],\n  template: function MatSnackBarContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(2, \"div\");\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    }\n  },\n  directives: [ɵngcc4.CdkPortalOutlet],\n  styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSnackBarAnimations.snackBarState]\n  }\n});\n\nMatSnackBarContainer.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Platform\n  }, {\n    type: MatSnackBarConfig\n  }];\n};\n\nMatSnackBarContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet, {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n    type: Component,\n    args: [{\n      selector: 'snack-bar-container',\n      template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n      // In Ivy embedded views will be change detected from their declaration place, rather than\n      // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n      // because it might cause snack bars that were opened from a template not to be out of date.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      animations: [matSnackBarAnimations.snackBarState],\n      host: {\n        'class': 'mat-snack-bar-container',\n        '[@state]': '_animationState',\n        '(@state.done)': 'onAnimationEnd($event)'\n      },\n      styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: MatSnackBarConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSnackBarModule = function MatSnackBarModule() {\n  _classCallCheck(this, MatSnackBarModule);\n};\n\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {\n  return new (t || MatSnackBarModule)();\n};\n\nMatSnackBarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSnackBarModule\n});\nMatSnackBarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n      exports: [MatSnackBarContainer, MatCommonModule],\n      declarations: [MatSnackBarContainer, SimpleSnackBar],\n      entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, {\n    declarations: function declarations() {\n      return [MatSnackBarContainer, SimpleSnackBar];\n    },\n    imports: function imports() {\n      return [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatSnackBarContainer, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to specify default snack bar. */\n\n\nvar MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n\n\nvar MatSnackBar = /*#__PURE__*/function () {\n  function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n    _classCallCheck(this, MatSnackBar);\n\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    this._defaultConfig = _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n\n    this._snackBarRefAtThisLevel = null;\n    /** The component that should be rendered as the snack bar's simple component. */\n\n    this.simpleSnackBarComponent = SimpleSnackBar;\n    /** The container component that attaches the provided template or component. */\n\n    this.snackBarContainerComponent = MatSnackBarContainer;\n    /** The CSS class to apply for handset mode. */\n\n    this.handsetCssClass = 'mat-snack-bar-handset';\n  }\n  /** Reference to the currently opened snackbar at *any* level. */\n\n\n  _createClass(MatSnackBar, [{\n    key: \"_openedSnackBarRef\",\n    get: function get() {\n      var parent = this._parentSnackBar;\n      return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    },\n    set: function set(value) {\n      if (this._parentSnackBar) {\n        this._parentSnackBar._openedSnackBarRef = value;\n      } else {\n        this._snackBarRefAtThisLevel = value;\n      }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n\n  }, {\n    key: \"openFromComponent\",\n    value: function openFromComponent(component, config) {\n      return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n\n  }, {\n    key: \"openFromTemplate\",\n    value: function openFromTemplate(template, config) {\n      return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open(message) {\n      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var config = arguments.length > 2 ? arguments[2] : undefined;\n\n      var _config = Object.assign(Object.assign({}, this._defaultConfig), config); // Since the user doesn't have access to the component, we can\n      // override the data to pass in our own message and action.\n\n\n      _config.data = {\n        message: message,\n        action: action\n      }; // Since the snack bar has `role=\"alert\"`, we don't\n      // want to announce the same message twice.\n\n      if (_config.announcementMessage === message) {\n        _config.announcementMessage = undefined;\n      }\n\n      return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss() {\n      if (this._openedSnackBarRef) {\n        this._openedSnackBarRef.dismiss();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // Only dismiss the snack bar at the current level on destroy.\n      if (this._snackBarRefAtThisLevel) {\n        this._snackBarRefAtThisLevel.dismiss();\n      }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n\n  }, {\n    key: \"_attachSnackBarContainer\",\n    value: function _attachSnackBarContainer(overlayRef, config) {\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      var injector = Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatSnackBarConfig,\n          useValue: config\n        }]\n      });\n      var containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n      var containerRef = overlayRef.attach(containerPortal);\n      containerRef.instance.snackBarConfig = config;\n      return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n\n  }, {\n    key: \"_attach\",\n    value: function _attach(content, userConfig) {\n      var _this6 = this;\n\n      var config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n\n      var overlayRef = this._createOverlay(config);\n\n      var container = this._attachSnackBarContainer(overlayRef, config);\n\n      var snackBarRef = new MatSnackBarRef(container, overlayRef);\n\n      if (content instanceof TemplateRef) {\n        var portal = new TemplatePortal(content, null, {\n          $implicit: config.data,\n          snackBarRef: snackBarRef\n        });\n        snackBarRef.instance = container.attachTemplatePortal(portal);\n      } else {\n        var injector = this._createInjector(config, snackBarRef);\n\n        var _portal = new ComponentPortal(content, undefined, injector);\n\n        var contentRef = container.attachComponentPortal(_portal); // We can't pass this via the injector, because the injector is created earlier.\n\n        snackBarRef.instance = contentRef.instance;\n      } // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n      // appropriate. This class is applied to the overlay element because the overlay must expand to\n      // fill the width of the screen for full width snackbars.\n\n\n      this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(function (state) {\n        var classList = overlayRef.overlayElement.classList;\n        state.matches ? classList.add(_this6.handsetCssClass) : classList.remove(_this6.handsetCssClass);\n      });\n\n      if (config.announcementMessage) {\n        // Wait until the snack bar contents have been announced then deliver this message.\n        container._onAnnounce.subscribe(function () {\n          _this6._live.announce(config.announcementMessage, config.politeness);\n        });\n      }\n\n      this._animateSnackBar(snackBarRef, config);\n\n      this._openedSnackBarRef = snackBarRef;\n      return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n\n  }, {\n    key: \"_animateSnackBar\",\n    value: function _animateSnackBar(snackBarRef, config) {\n      var _this7 = this;\n\n      // When the snackbar is dismissed, clear the reference to it.\n      snackBarRef.afterDismissed().subscribe(function () {\n        // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n        if (_this7._openedSnackBarRef == snackBarRef) {\n          _this7._openedSnackBarRef = null;\n        }\n\n        if (config.announcementMessage) {\n          _this7._live.clear();\n        }\n      });\n\n      if (this._openedSnackBarRef) {\n        // If a snack bar is already in view, dismiss it and enter the\n        // new snack bar after exit animation is complete.\n        this._openedSnackBarRef.afterDismissed().subscribe(function () {\n          snackBarRef.containerInstance.enter();\n        });\n\n        this._openedSnackBarRef.dismiss();\n      } else {\n        // If no snack bar is in view, enter the new snack bar.\n        snackBarRef.containerInstance.enter();\n      } // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n\n\n      if (config.duration && config.duration > 0) {\n        snackBarRef.afterOpened().subscribe(function () {\n          return snackBarRef._dismissAfter(config.duration);\n        });\n      }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay(config) {\n      var overlayConfig = new OverlayConfig();\n      overlayConfig.direction = config.direction;\n\n      var positionStrategy = this._overlay.position().global(); // Set horizontal position.\n\n\n      var isRtl = config.direction === 'rtl';\n      var isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n      var isRight = !isLeft && config.horizontalPosition !== 'center';\n\n      if (isLeft) {\n        positionStrategy.left('0');\n      } else if (isRight) {\n        positionStrategy.right('0');\n      } else {\n        positionStrategy.centerHorizontally();\n      } // Set horizontal position.\n\n\n      if (config.verticalPosition === 'top') {\n        positionStrategy.top('0');\n      } else {\n        positionStrategy.bottom('0');\n      }\n\n      overlayConfig.positionStrategy = positionStrategy;\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n\n  }, {\n    key: \"_createInjector\",\n    value: function _createInjector(config, snackBarRef) {\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      return Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatSnackBarRef,\n          useValue: snackBarRef\n        }, {\n          provide: MAT_SNACK_BAR_DATA,\n          useValue: config.data\n        }]\n      });\n    }\n  }]);\n\n  return MatSnackBar;\n}();\n\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n  return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\n\nMatSnackBar.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function MatSnackBar_Factory() {\n    return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  },\n  token: MatSnackBar,\n  providedIn: MatSnackBarModule\n});\n\nMatSnackBar.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: LiveAnnouncer\n  }, {\n    type: Injector\n  }, {\n    type: BreakpointObserver\n  }, {\n    type: MatSnackBar,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: MatSnackBarConfig,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n    type: Injectable,\n    args: [{\n      providedIn: MatSnackBarModule\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc5.Overlay\n    }, {\n      type: ɵngcc6.LiveAnnouncer\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc7.BreakpointObserver\n    }, {\n      type: MatSnackBar,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations }; //# sourceMappingURL=snack-bar.js.map","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers,\n      globalOpts = Chart.defaults.global,\n      defaultColor = globalOpts.defaultColor;\n  globalOpts.elements.point = {\n    radius: 3,\n    pointStyle: 'circle',\n    backgroundColor: defaultColor,\n    borderWidth: 1,\n    borderColor: defaultColor,\n    // Hover\n    hitRadius: 1,\n    hoverRadius: 4,\n    hoverBorderWidth: 1\n  };\n\n  function xRange(mouseX) {\n    var vm = this._view;\n    return vm ? Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hitRadius, 2) : false;\n  }\n\n  function yRange(mouseY) {\n    var vm = this._view;\n    return vm ? Math.pow(mouseY - vm.y, 2) < Math.pow(vm.radius + vm.hitRadius, 2) : false;\n  }\n\n  Chart.elements.Point = Chart.Element.extend({\n    inRange: function inRange(mouseX, mouseY) {\n      var vm = this._view;\n      return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;\n    },\n    inLabelRange: xRange,\n    inXRange: xRange,\n    inYRange: yRange,\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y\n      };\n    },\n    getArea: function getArea() {\n      return Math.PI * Math.pow(this._view.radius, 2);\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y,\n        padding: vm.radius + vm.borderWidth\n      };\n    },\n    draw: function draw(chartArea) {\n      var vm = this._view;\n      var model = this._model;\n      var ctx = this._chart.ctx;\n      var pointStyle = vm.pointStyle;\n      var radius = vm.radius;\n      var x = vm.x;\n      var y = vm.y;\n      var color = Chart.helpers.color;\n      var errMargin = 1.01; // 1.01 is margin for Accumulated error. (Especially Edge, IE.)\n\n      var ratio = 0;\n\n      if (vm.skip) {\n        return;\n      }\n\n      ctx.strokeStyle = vm.borderColor || defaultColor;\n      ctx.lineWidth = helpers.getValueOrDefault(vm.borderWidth, globalOpts.elements.point.borderWidth);\n      ctx.fillStyle = vm.backgroundColor || defaultColor; // Cliping for Points.\n      // going out from inner charArea?\n\n      if (chartArea !== undefined && (model.x < chartArea.left || chartArea.right * errMargin < model.x || model.y < chartArea.top || chartArea.bottom * errMargin < model.y)) {\n        // Point fade out\n        if (model.x < chartArea.left) {\n          ratio = (x - model.x) / (chartArea.left - model.x);\n        } else if (chartArea.right * errMargin < model.x) {\n          ratio = (model.x - x) / (model.x - chartArea.right);\n        } else if (model.y < chartArea.top) {\n          ratio = (y - model.y) / (chartArea.top - model.y);\n        } else if (chartArea.bottom * errMargin < model.y) {\n          ratio = (model.y - y) / (model.y - chartArea.bottom);\n        }\n\n        ratio = Math.round(ratio * 100) / 100;\n        ctx.strokeStyle = color(ctx.strokeStyle).alpha(ratio).rgbString();\n        ctx.fillStyle = color(ctx.fillStyle).alpha(ratio).rgbString();\n      }\n\n      Chart.canvasHelpers.drawPoint(ctx, pointStyle, radius, x, y);\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}
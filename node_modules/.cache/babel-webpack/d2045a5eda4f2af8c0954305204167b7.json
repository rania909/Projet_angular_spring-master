{"ast":null,"code":"/* global window: false */\n'use strict';\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers;\n  Chart.defaults.global.animation = {\n    duration: 1000,\n    easing: 'easeOutQuart',\n    onProgress: helpers.noop,\n    onComplete: helpers.noop\n  };\n  Chart.Animation = Chart.Element.extend({\n    currentStep: null,\n    // the current animation step\n    numSteps: 60,\n    // default number of steps\n    easing: '',\n    // the easing to use for this animation\n    render: null,\n    // render function used by the animation service\n    onAnimationProgress: null,\n    // user specified callback to fire on each step of the animation\n    onAnimationComplete: null // user specified callback to fire when the animation finishes\n\n  });\n  Chart.animationService = {\n    frameDuration: 17,\n    animations: [],\n    dropFrames: 0,\n    request: null,\n\n    /**\n     * @function Chart.animationService.addAnimation\n     * @param chartInstance {ChartController} the chart to animate\n     * @param animationObject {IAnimation} the animation that we will animate\n     * @param duration {Number} length of animation in ms\n     * @param lazy {Boolean} if true, the chart is not marked as animating to enable more responsive interactions\n     */\n    addAnimation: function addAnimation(chartInstance, animationObject, duration, lazy) {\n      var me = this;\n\n      if (!lazy) {\n        chartInstance.animating = true;\n      }\n\n      for (var index = 0; index < me.animations.length; ++index) {\n        if (me.animations[index].chartInstance === chartInstance) {\n          // replacing an in progress animation\n          me.animations[index].animationObject = animationObject;\n          return;\n        }\n      }\n\n      me.animations.push({\n        chartInstance: chartInstance,\n        animationObject: animationObject\n      }); // If there are no animations queued, manually kickstart a digest, for lack of a better word\n\n      if (me.animations.length === 1) {\n        me.requestAnimationFrame();\n      }\n    },\n    // Cancel the animation for a given chart instance\n    cancelAnimation: function cancelAnimation(chartInstance) {\n      var index = helpers.findIndex(this.animations, function (animationWrapper) {\n        return animationWrapper.chartInstance === chartInstance;\n      });\n\n      if (index !== -1) {\n        this.animations.splice(index, 1);\n        chartInstance.animating = false;\n      }\n    },\n    requestAnimationFrame: function requestAnimationFrame() {\n      var me = this;\n\n      if (me.request === null) {\n        // Skip animation frame requests until the active one is executed.\n        // This can happen when processing mouse events, e.g. 'mousemove'\n        // and 'mouseout' events will trigger multiple renders.\n        me.request = helpers.requestAnimFrame.call(window, function () {\n          me.request = null;\n          me.startDigest();\n        });\n      }\n    },\n    startDigest: function startDigest() {\n      var me = this;\n      var startTime = Date.now();\n      var framesToDrop = 0;\n\n      if (me.dropFrames > 1) {\n        framesToDrop = Math.floor(me.dropFrames);\n        me.dropFrames = me.dropFrames % 1;\n      }\n\n      var i = 0;\n\n      while (i < me.animations.length) {\n        if (me.animations[i].animationObject.currentStep === null) {\n          me.animations[i].animationObject.currentStep = 0;\n        }\n\n        me.animations[i].animationObject.currentStep += 1 + framesToDrop;\n\n        if (me.animations[i].animationObject.currentStep > me.animations[i].animationObject.numSteps) {\n          me.animations[i].animationObject.currentStep = me.animations[i].animationObject.numSteps;\n        }\n\n        me.animations[i].animationObject.render(me.animations[i].chartInstance, me.animations[i].animationObject);\n\n        if (me.animations[i].animationObject.onAnimationProgress && me.animations[i].animationObject.onAnimationProgress.call) {\n          me.animations[i].animationObject.onAnimationProgress.call(me.animations[i].chartInstance, me.animations[i]);\n        }\n\n        if (me.animations[i].animationObject.currentStep === me.animations[i].animationObject.numSteps) {\n          if (me.animations[i].animationObject.onAnimationComplete && me.animations[i].animationObject.onAnimationComplete.call) {\n            me.animations[i].animationObject.onAnimationComplete.call(me.animations[i].chartInstance, me.animations[i]);\n          } // executed the last frame. Remove the animation.\n\n\n          me.animations[i].chartInstance.animating = false;\n          me.animations.splice(i, 1);\n        } else {\n          ++i;\n        }\n      }\n\n      var endTime = Date.now();\n      var dropFrames = (endTime - startTime) / me.frameDuration;\n      me.dropFrames += dropFrames; // Do we have more stuff to animate?\n\n      if (me.animations.length > 0) {\n        me.requestAnimationFrame();\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}
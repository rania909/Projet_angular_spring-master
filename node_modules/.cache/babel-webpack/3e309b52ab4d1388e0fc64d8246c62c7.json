{"ast":null,"code":"'use strict';\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers;\n  Chart.defaults.bubble = {\n    hover: {\n      mode: 'single'\n    },\n    scales: {\n      xAxes: [{\n        type: 'linear',\n        // bubble should probably use a linear scale by default\n        position: 'bottom',\n        id: 'x-axis-0' // need an ID so datasets can reference the scale\n\n      }],\n      yAxes: [{\n        type: 'linear',\n        position: 'left',\n        id: 'y-axis-0'\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          // Title doesn't make sense for scatter since we format the data as a point\n          return '';\n        },\n        label: function label(tooltipItem, data) {\n          var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';\n          var dataPoint = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n          return datasetLabel + ': (' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ', ' + dataPoint.r + ')';\n        }\n      }\n    }\n  };\n  Chart.controllers.bubble = Chart.DatasetController.extend({\n    dataElementType: Chart.elements.Point,\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var points = meta.data; // Update Points\n\n      helpers.each(points, function (point, index) {\n        me.updateElement(point, index, reset);\n      });\n    },\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var xScale = me.getScaleForId(meta.xAxisID);\n      var yScale = me.getScaleForId(meta.yAxisID);\n      var custom = point.custom || {};\n      var dataset = me.getDataset();\n      var data = dataset.data[index];\n      var pointElementOptions = me.chart.options.elements.point;\n      var dsIndex = me.index;\n      helpers.extend(point, {\n        // Utility\n        _xScale: xScale,\n        _yScale: yScale,\n        _datasetIndex: dsIndex,\n        _index: index,\n        // Desired view properties\n        _model: {\n          x: reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex, me.chart.isCombo),\n          y: reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex),\n          // Appearance\n          radius: reset ? 0 : custom.radius ? custom.radius : me.getRadius(data),\n          // Tooltip\n          hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)\n        }\n      }); // Trick to reset the styles of the point\n\n      Chart.DatasetController.prototype.removeHoverStyle.call(me, point, pointElementOptions);\n      var model = point._model;\n      model.skip = custom.skip ? custom.skip : isNaN(model.x) || isNaN(model.y);\n      point.pivot();\n    },\n    getRadius: function getRadius(value) {\n      return value.r || this.chart.options.elements.point.radius;\n    },\n    setHoverStyle: function setHoverStyle(point) {\n      var me = this;\n      Chart.DatasetController.prototype.setHoverStyle.call(me, point); // Radius\n\n      var dataset = me.chart.data.datasets[point._datasetIndex];\n      var index = point._index;\n      var custom = point.custom || {};\n      var model = point._model;\n      model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.hoverRadius, index, me.chart.options.elements.point.hoverRadius) + me.getRadius(dataset.data[index]);\n    },\n    removeHoverStyle: function removeHoverStyle(point) {\n      var me = this;\n      Chart.DatasetController.prototype.removeHoverStyle.call(me, point, me.chart.options.elements.point);\n      var dataVal = me.chart.data.datasets[point._datasetIndex].data[point._index];\n      var custom = point.custom || {};\n      var model = point._model;\n      model.radius = custom.radius ? custom.radius : me.getRadius(dataVal);\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}